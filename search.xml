<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python装饰器</title>
    <url>/2022/05/30/Python%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    <content><![CDATA[<h2 id="property"><a href="#property" class="headerlink" title="@property"></a>@property</h2><p>将方法变成属性使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">birth</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._birth</span><br><span class="line"></span><br><span class="line"><span class="meta">    @birth.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">birth</span>(<span class="params">self, value</span>):</span><br><span class="line">        self._birth = value</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2015</span> - self._birth</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Student()</span><br><span class="line">s.birth = <span class="number">1998</span>  <span class="comment"># set_birth</span></span><br><span class="line"><span class="built_in">print</span>(s.birth)  <span class="comment"># get_birth</span></span><br><span class="line"><span class="built_in">print</span>(s.age)</span><br></pre></td></tr></table></figure>

<h2 id="classmethod"><a href="#classmethod" class="headerlink" title="@classmethod"></a>@classmethod</h2><p>classmethod: 无序实例化即可使用，class.func()</p>
<p>普通：实例化才可使用，A&#x3D;class(), A.func()</p>
<p>带修饰类方法：<strong>cls</strong>做为方法的<strong>第一个参数</strong>，隐式的将类做为对象，传递给方法，调用时<strong>无须实例化</strong>。</p>
<p>普通函数方法：self做为第一个参数，隐式的将类实例传递给方法，调用方法时，类必须实例化。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cfunc</span>(<span class="params">cls, x, y</span>):</span><br><span class="line">        <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(A().func(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">    <span class="built_in">print</span>(A.cfunc(<span class="number">4</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure>

<h2 id="static"><a href="#static" class="headerlink" title="@static"></a>@static</h2><p>仅需要功能，而不需要类的时候使用。不用实例化就可以调用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># staticmethod</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cal</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">        <span class="keyword">return</span> x+y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cal.add(<span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure>

<h2 id="wrap"><a href="#wrap" class="headerlink" title="@wrap"></a>@wrap</h2><p>使用functool.wraps包裹函数，可以避免函数因为装饰器而重名，以及注释啥的发生变化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="string">&quot;求和&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(add.__name__)</span><br><span class="line"><span class="built_in">print</span>(add.__doc__)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python装饰器</tag>
      </tags>
  </entry>
  <entry>
    <title>celery</title>
    <url>/2022/05/26/celery/</url>
    <content><![CDATA[<h2 id="celery介绍（分布式消息任务队列）"><a href="#celery介绍（分布式消息任务队列）" class="headerlink" title="celery介绍（分布式消息任务队列）"></a>celery介绍（分布式消息任务队列）</h2><p>Celery 是一款非常简单、灵活、可靠的分布式系统，可用于处理大量消息，并且提供了一整套操作此系统的一系列工具。</p>
<h2 id="什么是任务队列"><a href="#什么是任务队列" class="headerlink" title="什么是任务队列"></a>什么是任务队列</h2><p>任务队列一般用于线程或计算机之间分配工作的一种机制。</p>
<p>任务队列的输入是一个称为任务的工作单元，有专门的职程（Worker）进行不断的监视任务队列，进行执行新的任务工作。</p>
<p>Celery 通过消息机制进行通信，通常使用中间人（Broker）作为客户端和职程（Worker）调节。启动一个任务，客户端向消息队列发送一条消息，然后中间人（Broker）将消息传递给一个职程（Worker），最后由职程（Worker）进行执行中间人（Broker）分配的任务。</p>
<h2 id="celery流程"><a href="#celery流程" class="headerlink" title="celery流程"></a>celery流程</h2><p>消息中间件（message broker）</p>
<p>任务执行单元（worker）</p>
<p>任务执行结果存储（task result store）<img src="/2022/05/26/celery//1653226700584.png" alt="img"></p>
<h2 id="多目录异步任务"><a href="#多目录异步任务" class="headerlink" title="多目录异步任务"></a>多目录异步任务</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="/2022/05/26/celery//image-20220523094307264.png" alt="image-20220523094307264"></p>
<p>celery.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">cel = Celery(<span class="string">&#x27;celery_demo&#x27;</span>,</span><br><span class="line">             broker=<span class="string">&#x27;redis://127.0.0.1:6379/1&#x27;</span>,  <span class="comment"># 创建任务</span></span><br><span class="line">             backend=<span class="string">&#x27;redis://127.0.0.1:6379/2&#x27;</span>,  <span class="comment"># 保存任务结果</span></span><br><span class="line">             include=[<span class="string">&#x27;celery_tasks.task01&#x27;</span>,</span><br><span class="line">                      <span class="string">&#x27;celery_tasks.task02&#x27;</span>, ],</span><br><span class="line">             )</span><br><span class="line"><span class="comment"># 时区</span></span><br><span class="line">cel.conf.timezone = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="comment"># 使用utc</span></span><br><span class="line">cel.conf.enable_utc = <span class="literal">False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>task01.py</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> cel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@cel.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_mail</span>(<span class="params">name</span>):</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;向 %s发送邮件任务&quot;</span> % name</span><br></pre></td></tr></table></figure>

<p>task02.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> cel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@cel.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_msg</span>(<span class="params">name</span>):</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;向 %s发送短信任务&quot;</span> % name</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>produce_tasks.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery_tasks.task01 <span class="keyword">import</span> send_mail</span><br><span class="line"></span><br><span class="line">res = send_mail.delay(<span class="string">&#x27;zhang&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>check_result.py</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery.result <span class="keyword">import</span> AsyncResult</span><br><span class="line"></span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery_tasks.celery <span class="keyword">import</span> cel</span><br><span class="line"></span><br><span class="line">async_result = AsyncResult(<span class="built_in">id</span>=<span class="string">&quot;dc955c8b-bffb-436f-ae0f-deb8c528258a&quot;</span>, app=cel)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> async_result.successful():</span><br><span class="line">    res = async_result.get()</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> async_result.failed():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行失败&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> async_result.status == <span class="string">&quot;PENDING&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;任务等待中被执行&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> async_result.status == <span class="string">&quot;PETRY&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;任务异常后正在被重试&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> async_result.status == <span class="string">&#x27;STARTED&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;任务开始被执行&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>启动命令：先执行work，然后执行produce_tasks</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">celery -A celery_tasks worker -l info -P eventlet</span><br><span class="line">python produce_tasks.py</span><br></pre></td></tr></table></figure>

<h2 id="多目录异步定时任务"><a href="#多目录异步定时任务" class="headerlink" title="多目录异步定时任务"></a>多目录异步定时任务</h2><h3 id="项目结构-1"><a href="#项目结构-1" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="/2022/05/26/celery//image-20220523094307264.png" alt="image-20220523094307264"></p>
<p>单个定时任务</p>
<p>produce_task.py</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery_tasks.task01 <span class="keyword">import</span> send_mail</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"></span><br><span class="line">ctime = datetime.now()  <span class="comment"># 获取当前时间</span></span><br><span class="line">utc_time = datetime.utcfromtimestamp(ctime.timestamp())  <span class="comment"># 时间转换为时间戳</span></span><br><span class="line">time_delay = timedelta(seconds=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">task_time = utc_time + time_delay</span><br><span class="line"></span><br><span class="line">res = send_mail.apply_async(args=[<span class="string">&#x27;zhang&#x27;</span>], eta=task_time)</span><br><span class="line"><span class="built_in">print</span>(res.<span class="built_in">id</span>)</span><br></pre></td></tr></table></figure>

<p>多个定时任务</p>
<p>celery_tasks.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"></span><br><span class="line">cel = Celery(<span class="string">&#x27;celery_demo&#x27;</span>,</span><br><span class="line">             broker=<span class="string">&#x27;redis://127.0.0.1:6379/1&#x27;</span>,  <span class="comment"># 创建任务</span></span><br><span class="line">             backend=<span class="string">&#x27;redis://127.0.0.1:6379/2&#x27;</span>,  <span class="comment"># 保存任务结果</span></span><br><span class="line">             include=[<span class="string">&#x27;celery_tasks.task01&#x27;</span>,</span><br><span class="line">                      <span class="string">&#x27;celery_tasks.task02&#x27;</span>, ],</span><br><span class="line">             )</span><br><span class="line"><span class="comment"># 时区</span></span><br><span class="line">cel.conf.timezone = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="comment"># 使用utc</span></span><br><span class="line">cel.conf.enable_utc = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">cel.conf.beat_schedule = &#123;</span><br><span class="line">    <span class="string">&#x27;add-every-10-seconds&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;celery_tasks.task01.send_mail&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;schedule&#x27;</span>: timedelta(seconds=<span class="number">6</span>), <span class="comment"># 每6s增加一个任务</span></span><br><span class="line">        <span class="string">&#x27;args&#x27;</span>: (<span class="string">&#x27;zhang&#x27;</span>,)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;add-every-1-minutes&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;celery_tasks.task02.send_msg&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;schedule&#x27;</span>: crontab(minute=<span class="string">&#x27;*/1&#x27;</span>),  <span class="comment"># 每分钟发送一次</span></span><br><span class="line">        <span class="string">&#x27;args&#x27;</span>: (<span class="string">&#x27;zhang&#x27;</span>,)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启动命令：先启动beat生成任务，然后work执行任务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">celery -A celery_tasks beat</span><br><span class="line">celery -A celery_tasks worker -l info -P eventlet</span><br></pre></td></tr></table></figure>

<h2 id="Django与celery结合使用"><a href="#Django与celery结合使用" class="headerlink" title="Django与celery结合使用"></a>Django与celery结合使用</h2><p><img src="/2022/05/26/celery//image-20220523155250320.png" alt="image-20220523155250320"></p>
<p>sms.tasks.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mycelery.main <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_mail</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;向 %s发送邮件任务&quot;</span> % name)</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>config.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">broker_url = <span class="string">&#x27;redis://127.0.0.1:6379/14&#x27;</span></span><br><span class="line">result_backend = <span class="string">&#x27;redis://127.0.0.1:6379/15&#x27;</span></span><br></pre></td></tr></table></figure>

<p>main.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">&#x27;sms&#x27;</span>)</span><br><span class="line"></span><br><span class="line">os.environ.setdefault(<span class="string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="string">&#x27;django_celery.settings.dev&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.config_from_object(<span class="string">&#x27;mycelery.config&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.autodiscover_tasks([<span class="string">&quot;mycelery.sms&quot;</span>, ])</span><br></pre></td></tr></table></figure>

<p>django views.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> mycelery.sms.tasks <span class="keyword">import</span> send_mail</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">celery</span>(<span class="params">request</span>):</span><br><span class="line">    send_mail(<span class="string">&#x27;zhang&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>urls.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;test/&#x27;</span>, views.celery),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行命令，进入mycelery根目录执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">celery -A mycelery.main worker -l info -P eventlet</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>celery</tag>
      </tags>
  </entry>
  <entry>
    <title>choices</title>
    <url>/2022/05/30/choices/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gender_choice = [</span><br><span class="line">     (<span class="number">1</span>, <span class="string">&#x27;男&#x27;</span>),</span><br><span class="line">     (<span class="number">2</span>, <span class="string">&#x27;女&#x27;</span>),</span><br><span class="line"> ]</span><br><span class="line"></span><br><span class="line"> gender = models.SmallIntegerField(verbose_name=<span class="string">&#x27;性别&#x27;</span>, choices=gender_choice)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="字段用法"><a href="#字段用法" class="headerlink" title="字段用法"></a>字段用法</h2><p>元组第一个数据的是用来存储在数据库中，第二个数据是用来显示的，取出显示字段的函数为</p>
<p>get_xxx_display。</p>
<p>若没有对应的元组，则按存储字段来显示。</p>
]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>choices</tag>
      </tags>
  </entry>
  <entry>
    <title>clash给手机分享热点</title>
    <url>/2022/07/06/clash/</url>
    <content><![CDATA[<p>电脑clash端如下配置，手机和电脑连接<strong>同一个wifi</strong>，<strong>点开</strong>clash <strong>Allow LAN</strong>的时候会有<strong>WLAN</strong>地址，就是代理地址，需要在手机上配置，例如：现在是代理地址192.168.0.10，clash <strong>Port端口</strong>为8888</p>
<p><img src="/2022/07/06/clash//image-20220706094825205.png" alt="image-20220706094825205"></p>
<p><img src="/2022/07/06/clash//image-20220706095105820.png" alt="image-20220706095105820"></p>
<p>手机上配置如下：</p>
<p><img src="/2022/07/06/clash//image-20220706095224196.png" alt="image-20220706095224196"></p>
]]></content>
      <tags>
        <tag>刷机</tag>
      </tags>
  </entry>
  <entry>
    <title>cookies和session的使用</title>
    <url>/2022/05/30/cookies%E5%92%8Csession%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h2 id="cookie的设置"><a href="#cookie的设置" class="headerlink" title="cookie的设置"></a>cookie的设置</h2><p><img src="/2022/05/30/cookies%E5%92%8Csession%E7%9A%84%E4%BD%BF%E7%94%A8//1636380721512.png"></p>
<h2 id="cookie的获取和删除"><a href="#cookie的获取和删除" class="headerlink" title="cookie的获取和删除"></a>cookie的获取和删除</h2><p><img src="/2022/05/30/cookies%E5%92%8Csession%E7%9A%84%E4%BD%BF%E7%94%A8//1636380640224.png" alt="img"></p>
<h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><h2 id="session开启的初始配置"><a href="#session开启的初始配置" class="headerlink" title="session开启的初始配置"></a>session开启的初始配置</h2><p><img src="/2022/05/30/cookies%E5%92%8Csession%E7%9A%84%E4%BD%BF%E7%94%A8//1636381889990.png"><img src="/2022/05/30/cookies%E5%92%8Csession%E7%9A%84%E4%BD%BF%E7%94%A8//1636382085181.png"></p>
<p><img src="/2022/05/30/cookies%E5%92%8Csession%E7%9A%84%E4%BD%BF%E7%94%A8//1636382413875.png"></p>
<p><img src="/2022/05/30/cookies%E5%92%8Csession%E7%9A%84%E4%BD%BF%E7%94%A8//1636424092444.png"></p>
]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>cookies</tag>
        <tag>session</tag>
      </tags>
  </entry>
  <entry>
    <title>django开发笔记</title>
    <url>/2022/05/29/django%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><p>models.ForeignKey(to&#x3D;’Category’, on_delete&#x3D;models.CASCADE)</p>
<p>注意加上引号和 on_delete</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Category</span>(models.Model):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    类别</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">&#x27;类别&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(models.Model):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    文章</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">&#x27;标题&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    content = models.TextField(verbose_name=<span class="string">&#x27;内容&#x27;</span>)</span><br><span class="line">    category = models.ForeignKey(to=<span class="string">&#x27;Category&#x27;</span>, on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure>

<h2 id="POST-请求-推荐使用-request-data-获取数据"><a href="#POST-请求-推荐使用-request-data-获取数据" class="headerlink" title="POST 请求,推荐使用 request.data 获取数据"></a>POST 请求,推荐使用 request.data 获取数据</h2><p>原始做法，只能使用 body、POST、GET</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">application/x-www-form-urlencoded</span><br><span class="line">使用request.POST.get</span><br><span class="line"></span><br><span class="line">application/json</span><br><span class="line">使用json.loads(request.body.decode(&#x27;utf8&#x27;))</span><br><span class="line"></span><br><span class="line">multipart/form-data</span><br><span class="line">使用request.POST.get</span><br></pre></td></tr></table></figure>

<p>使用 drf 后</p>
<h3 id="使用-json-格式上传，-request-data"><a href="#使用-json-格式上传，-request-data" class="headerlink" title="使用 json 格式上传， request.data"></a>使用 json 格式上传， request.data</h3><p><img src="/2022/05/29/django%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0//image-20220526172957047.png" alt="image-20220526172957047"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(request.body)</span><br><span class="line">print(request.POST)</span><br><span class="line">print(request.data)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;&#123;&quot;name&quot;:&quot;\xe5\xbc\xa0\xe4\xb8\x89&quot;,&quot;gender&quot;:1&#125;&#x27;</span><br><span class="line">&lt;QueryDict: &#123;&#125;&gt;</span><br><span class="line">&#123;&#x27;name&#x27;: &#x27;张三&#x27;, &#x27;gender&#x27;: 1&#125;</span><br></pre></td></tr></table></figure>

<h3 id="x-www-form-urlencoded-格式，使用-request-data-dict"><a href="#x-www-form-urlencoded-格式，使用-request-data-dict" class="headerlink" title="x-www-form-urlencoded 格式，使用 request.data.dict()"></a>x-www-form-urlencoded 格式，使用 request.data.dict()</h3><p><img src="/2022/05/29/django%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0//image-20220526172428116.png" alt="image-20220526172428116"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;name=%E5%BC%A0%E4%B8%89&amp;gender=1&#x27;</span><br><span class="line">&lt;QueryDict: &#123;&#x27;name&#x27;: [&#x27;张三&#x27;], &#x27;gender&#x27;: [&#x27;1&#x27;]&#125;&gt;</span><br><span class="line">&lt;QueryDict: &#123;&#x27;name&#x27;: [&#x27;张三&#x27;], &#x27;gender&#x27;: [&#x27;1&#x27;]&#125;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="url"><a href="#url" class="headerlink" title="url"></a>url</h2><p>re_path：?P <code>&lt;value&gt;</code>的意思就是命名一个名字为 value 的组，匹配规则符合后面的&#x2F;d+</p>
<p>一定要使用 ^开头，$结尾，不然会出现未知的 bug</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">re_path(r&#x27;^category/(?P&lt;pk&gt;\d+)/$&#x27;, CategoryView.as_view()),</span><br></pre></td></tr></table></figure>

<h2 id="serializer"><a href="#serializer" class="headerlink" title="serializer"></a>serializer</h2><ul>
<li>序列化</li>
<li>验证数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NewCatagory</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        pk = kwargs.get(<span class="string">&#x27;pk&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> pk:</span><br><span class="line">            obj =models.Category.objects.<span class="built_in">filter</span>(pk=pk).first()</span><br><span class="line">            <span class="comment"># 序列化的数据，instance传入</span></span><br><span class="line">            ser = NewCatagorySerializer(instance=obj)</span><br><span class="line">            <span class="keyword">return</span> Response(ser.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            obj = models.Category.objects.<span class="built_in">all</span>()</span><br><span class="line">            ser = NewCatagorySerializer(instance=obj, many=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span> Response(ser.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 反序列化数据，data传入</span></span><br><span class="line">        ser = NewCatagorySerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> ser.is_valid():</span><br><span class="line">            ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(ser.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(ser.errors)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        全部更新，全部字段都需要传</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        pk = kwargs.get(<span class="string">&#x27;pk&#x27;</span>)</span><br><span class="line">        obj = models.Category.objects.<span class="built_in">filter</span>(pk=pk).first()</span><br><span class="line">        <span class="comment"># 修改数据，两者均传入</span></span><br><span class="line">        ser = NewCatagorySerializer(instance=obj, data=request.data)</span><br><span class="line">        <span class="keyword">if</span> ser.is_valid():</span><br><span class="line">            ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(ser.data)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.errors)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">patch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        局部更新，partial=True</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        pk = kwargs.get(<span class="string">&#x27;pk&#x27;</span>)</span><br><span class="line">        obj = models.Category.objects.<span class="built_in">filter</span>(pk=pk).first()</span><br><span class="line">        <span class="comment"># 修改数据，两者均传入</span></span><br><span class="line">        ser = NewCatagorySerializer(instance=obj, data=request.data, partial=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> ser.is_valid():</span><br><span class="line">            ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(ser.data)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.errors)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        pk = kwargs.get(<span class="string">&#x27;pk&#x27;</span>)</span><br><span class="line">        models.Category.objects.<span class="built_in">filter</span>(pk=pk).delete()</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&quot;删除成功&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>serializer 若想增加字段显示。</p>
<ul>
<li>使用 get_xx_display，xx 为原始 model 中的属性，显示其 choice 文本信息（普通用户）。</li>
<li>使用属性的子属性。</li>
<li>使用 SerializerMethodField()，其中需要定义 get_xx 方法，其中 obj 为 model 应该返回的数据。</li>
</ul>
<p>depth 默认为 0，为 1 可以显示关联表的信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfo</span>(models.Model):</span><br><span class="line">    user_type_choice = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&#x27;普通用户&#x27;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&#x27;VIP&#x27;</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">&#x27;SVIP&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    user_type = models.IntegerField(choices=user_type_choice)</span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line">    group = models.ForeignKey(to=<span class="string">&#x27;UserGroup&#x27;</span>, on_delete=models.CASCADE)  <span class="comment"># 一对多</span></span><br><span class="line">    roles = models.ManyToManyField(to=<span class="string">&#x27;Role&#x27;</span>)  <span class="comment"># 多对多</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfoModelSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="built_in">type</span> = serializers.CharField(source=<span class="string">&#x27;get_user_type_display&#x27;</span>,required=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = UserInfo</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line">        depth = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>多对多</p>
<ul>
<li>可以使用不同的 serializer 获取数据</li>
<li>注意传入方式：多对多属性</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Category</span>(models.Model):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    类别</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">&#x27;类别&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(models.Model):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    文章</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">&#x27;标题&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    content = models.TextField(verbose_name=<span class="string">&#x27;内容&#x27;</span>)</span><br><span class="line">    category = models.ForeignKey(to=<span class="string">&#x27;Category&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    tag = models.ManyToManyField(to=<span class="string">&#x27;Tag&#x27;</span>, verbose_name=<span class="string">&#x27;标签&#x27;</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>, default=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tag</span>(models.Model):</span><br><span class="line">    label = models.CharField(verbose_name=<span class="string">&#x27;标签&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArticleSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    category_name = serializers.CharField(source=<span class="string">&#x27;category.name&#x27;</span>, required=<span class="literal">False</span>)</span><br><span class="line">    tag_name = serializers.SerializerMethodField(required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.Article</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line">        <span class="comment"># depth = 1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_tag_name</span>(<span class="params">self, row</span>):</span><br><span class="line">        tags = row.tag.<span class="built_in">all</span>()</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> tag <span class="keyword">in</span> tags:</span><br><span class="line">            res.append(tag.label)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GetArticleSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.Article</span><br><span class="line">        fields = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;tag&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        pk = kwargs.get(<span class="string">&#x27;pk&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> pk:</span><br><span class="line">            obj = models.Article.objects.<span class="built_in">filter</span>(pk=pk).first()</span><br><span class="line">            <span class="comment"># 序列化的数据，instance传入</span></span><br><span class="line">            ser = GetArticleSerializer(instance=obj)</span><br><span class="line">            <span class="keyword">return</span> Response(ser.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            obj = models.Article.objects.<span class="built_in">all</span>()</span><br><span class="line">            ser = GetArticleSerializer(instance=obj, many=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span> Response(ser.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 反序列化数据，data传入</span></span><br><span class="line">        <span class="built_in">print</span>(request.data)</span><br><span class="line">        ser = ArticleSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> ser.is_valid():</span><br><span class="line">            ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(ser.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(ser.errors)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        全部更新，全部字段都需要传</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        pk = kwargs.get(<span class="string">&#x27;pk&#x27;</span>)</span><br><span class="line">        obj = models.Article.objects.<span class="built_in">filter</span>(pk=pk).first()</span><br><span class="line">        <span class="comment"># 修改数据，两者均传入</span></span><br><span class="line">        ser = ArticleSerializer(instance=obj, data=request.data)</span><br><span class="line">        <span class="keyword">if</span> ser.is_valid():</span><br><span class="line">            ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(ser.data)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.errors)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">patch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        局部更新，partial=True</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        pk = kwargs.get(<span class="string">&#x27;pk&#x27;</span>)</span><br><span class="line">        obj = models.Article.objects.<span class="built_in">filter</span>(pk=pk).first()</span><br><span class="line">        <span class="comment"># 修改数据，两者均传入</span></span><br><span class="line">        ser = ArticleSerializer(instance=obj, data=request.data, partial=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> ser.is_valid():</span><br><span class="line">            ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(ser.data)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.errors)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        pk = kwargs.get(<span class="string">&#x27;pk&#x27;</span>)</span><br><span class="line">        models.Article.objects.<span class="built_in">filter</span>(pk=pk).delete()</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&quot;删除成功&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>postman 传入方式</p>
<p><img src="/2022/05/29/django%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0//image-20220528154725419.png" alt="image-20220528154725419"></p>
<h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>主要使用 page 和 offset</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GetArticleSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.Article</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PageArticle</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        queryset = models.Article.objects.<span class="built_in">all</span>()</span><br><span class="line">        pg = PageNumberPagination()</span><br><span class="line">        res = pg.paginate_queryset(queryset, request, self)</span><br><span class="line">        ser = GetArticleSerializer(instance=res, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># setting.py</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>: <span class="string">&#x27;rest_framework.pagination.PageNumberPagination&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PAGE_SIZE&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="类继承潜规则"><a href="#类继承潜规则" class="headerlink" title="类继承潜规则"></a>类继承潜规则</h2><p>遇见父类有这种 raise 函数，例如抛出 NotImplementedError 异常，则需要继承类重写，实现该函数功能。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">paginate_queryset</span>(<span class="params">self, queryset, request, view=<span class="literal">None</span></span>):  <span class="comment"># pragma: no cover</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;paginate_queryset() must be implemented.&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><h3 id="1、表结构设计"><a href="#1、表结构设计" class="headerlink" title="1、表结构设计"></a>1、表结构设计</h3><ul>
<li>不会经常变化的值放在内存：choice 形式，避免跨表查询，降低性能</li>
<li>分表：如果表中的数据太多，可以选择水平分表。</li>
<li>表自关联</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">呼啦圈表设计</span></span><br><span class="line"><span class="string">表：</span></span><br><span class="line"><span class="string">用户：用户名、密码</span></span><br><span class="line"><span class="string">评论: 时间、父评论（自关联）、归属文章：评论 1：n、评论者（用户）：评论 1：n</span></span><br><span class="line"><span class="string">文章: 作者（用户)：文章 1：n 、时间、分类、标题、内容、简介、评论数、浏览数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfo</span>(models.Model):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;用户表&#x27;&#x27;&#x27;</span></span><br><span class="line">    username = models.CharField(verbose_name=<span class="string">&#x27;用户名&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    password = models.CharField(verbose_name=<span class="string">&quot;密码&quot;</span>, max_length=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(models.Model):</span><br><span class="line">    <span class="string">&#x27;文章表&#x27;</span></span><br><span class="line">    category_choices = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&#x27;咨询&#x27;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&#x27;公司动态&#x27;</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">&#x27;分享&#x27;</span>),</span><br><span class="line">        (<span class="number">4</span>, <span class="string">&#x27;答疑&#x27;</span>),</span><br><span class="line">        (<span class="number">5</span>, <span class="string">&#x27;其他&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    category = models.CharField(verbose_name=<span class="string">&#x27;分类&#x27;</span>, choices=category_choices)</span><br><span class="line">    title = models.CharField(verbose_name=<span class="string">&#x27;标题&#x27;</span>, max_length=<span class="number">255</span>)</span><br><span class="line">    image = models.CharField(verbose_name=<span class="string">&#x27;图片路径&#x27;</span>, max_length=<span class="number">128</span>)</span><br><span class="line">    summary = models.CharField(verbose_name=<span class="string">&#x27;简介&#x27;</span>, max_length=<span class="number">255</span>)</span><br><span class="line">    comment_count = models.IntegerField(verbose_name=<span class="string">&#x27;评论数&#x27;</span>, default=<span class="number">0</span>)</span><br><span class="line">    read_count = models.IntegerField(verbose_name=<span class="string">&#x27;阅读数&#x27;</span>, default=<span class="number">0</span>)</span><br><span class="line">    data = models.DateTimeField(verbose_name=<span class="string">&#x27;创建时间&#x27;</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    author = models.ForeignKey(</span><br><span class="line">        to=<span class="string">&#x27;UserInfo&#x27;</span>, verbose_name=<span class="string">&#x27;作者&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Comment</span>(models.Model):</span><br><span class="line">    <span class="string">&#x27;评论表&#x27;</span></span><br><span class="line">    content = models.TextField(verbose_name=<span class="string">&#x27;评论&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    article = models.ForeignKey(</span><br><span class="line">        verbose_name=<span class="string">&#x27;文章&#x27;</span>, to=<span class="string">&#x27;Article&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    user = models.ForeignKey(</span><br><span class="line">        verbose_name=<span class="string">&#x27;评论者&#x27;</span>, to=<span class="string">&#x27;UserInfo&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    parent = models.ForeignKey(</span><br><span class="line">        verbose_name=<span class="string">&#x27;父评论&#x27;</span>, to=<span class="string">&#x27;self&#x27;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, default=<span class="literal">None</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="数据库分表、分区"><a href="#数据库分表、分区" class="headerlink" title="数据库分表、分区"></a>数据库分表、分区</h2><h3 id="水平分表"><a href="#水平分表" class="headerlink" title="水平分表"></a>水平分表</h3><p>不改变表结构，以行为单位对数据进行拆分。</p>
<h4 id="1、什么是水平分表"><a href="#1、什么是水平分表" class="headerlink" title="1、什么是水平分表"></a>1、什么是水平分表</h4><p>水平分表就是指以行为单位对数据进行拆分，一般意义上的分库分表指的就是水平分表。<br>分表之后，所有表的结构都是一样的。</p>
<h4 id="2、为什么要水平分表"><a href="#2、为什么要水平分表" class="headerlink" title="2、为什么要水平分表"></a>2、为什么要水平分表</h4><p>水平分表可以解决表中的数据量大的问题，如果一张表的数据太多，操作起来会很麻烦，所以分表存储数据。</p>
<h4 id="3、-如何进行水平分表"><a href="#3、-如何进行水平分表" class="headerlink" title="3、 如何进行水平分表"></a>3、 如何进行水平分表</h4><p>一般可以有范围法和 hash 法来进行水平分表。<br>假设现在有 30 万行数据，需要对它们进行水平分表：<br>范围法很好理解，可以让第 1-100000 行数据存放在表 1，第 100001-200000 行数据存放在表 2，第 200001-300000 行数据存放在表 3，就完成了水平分表。<br>hash 法也不难理解，就是选择一个合适的 hash 函数，比如说使用取模操作(%)，把%3 结果为 0 的数据存放在表 1，结果为 1 的存放在表 2，结果为 2 的存放在表 3 即可。</p>
<h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ul>
<li>不存在单表数据量过大</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>跨表 join 关联查询性能差</li>
<li>数据扩展和维护起来麻烦</li>
</ul>
<h3 id="垂直分表"><a href="#垂直分表" class="headerlink" title="垂直分表"></a>垂直分表</h3><p>改变表结构，将列切分开成为不同表。</p>
<p><strong>垂直分表</strong>是基于数据库中的”列”进行，某个表字段较多，可以新建一张扩展表，将不经常用或字段长度较大的字段拆分出去到扩展表中。</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>解耦，提高 io 效率</li>
</ul>
<h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>存在单表数据量过大的问题</li>
<li>事务处理变得复杂</li>
</ul>
<p><img src="/2022/05/29/django%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0//image-20220529164420999.png" alt="image-20220529164420999"><img src="/2022/05/29/django%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0//image-20220529164425657.png" alt="image-20220529164425657"></p>
<h2 id="F-对象"><a href="#F-对象" class="headerlink" title="F 对象"></a>F 对象</h2><p>F 对象可以避免直接对数据库取值，然后加减保存。在多线程情况会这种方式会出现数据异常。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">all</span> = BookInfo.objects.<span class="built_in">filter</span>(auth=<span class="string">&quot;小明&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">all</span>:</span><br><span class="line">price = b.price</span><br><span class="line">b.price = price + <span class="number">10</span></span><br><span class="line">b.save</span><br></pre></td></tr></table></figure>

<p><strong>使用 F 对象来计算</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">BookInfo.objects.<span class="built_in">filter</span>(auth=<span class="string">&quot;小明&quot;</span>).update(price=F(<span class="string">&quot;price&quot;</span>)+<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<h2 id="获取单条数据"><a href="#获取单条数据" class="headerlink" title="获取单条数据"></a>获取单条数据</h2><p>常规情况下，使用 get()，但是数据不存在会报错，推荐使用 filter().first()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">article = Article.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">article = Article.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">1</span>).first()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql</title>
    <url>/2022/07/08/mysql/</url>
    <content><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="建立-amp-amp-删除-amp-amp-使用数据库"><a href="#建立-amp-amp-删除-amp-amp-使用数据库" class="headerlink" title="建立&amp;&amp;删除&amp;&amp;使用数据库"></a>建立&amp;&amp;删除&amp;&amp;使用数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database xxx;</span><br><span class="line"><span class="keyword">drop</span> database xxx;</span><br><span class="line">use xxx;</span><br></pre></td></tr></table></figure>

<h2 id="创建表-amp-amp-删除表"><a href="#创建表-amp-amp-删除表" class="headerlink" title="创建表&amp;&amp;删除表"></a>创建表&amp;&amp;删除表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span>(</span><br><span class="line">id <span class="type">INT</span> UNSIGNED AUTO_INCREMENT,</span><br><span class="line">username <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> key(id)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span>; # 删除表和结构</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span>; # 删除所有数据，保存表结构</span><br></pre></td></tr></table></figure>

<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> (id, username) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name,column_name</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line">[<span class="keyword">WHERE</span> Clause]</span><br><span class="line">[LIMIT N][ <span class="keyword">OFFSET</span> M]</span><br></pre></td></tr></table></figure>

<h2 id="limit-限制返回行数"><a href="#limit-限制返回行数" class="headerlink" title="limit 限制返回行数"></a>limit 限制返回行数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> device_id</span><br><span class="line"><span class="keyword">from</span> user_profile</span><br><span class="line">limit <span class="number">0</span>,<span class="number">2</span>; #从<span class="number">0</span>开始，前面两个</span><br></pre></td></tr></table></figure>

<h2 id="不等于-lt-gt-x2F-x3D-，不是所以系统都可以用）"><a href="#不等于-lt-gt-x2F-x3D-，不是所以系统都可以用）" class="headerlink" title="不等于 &lt;&gt;&#x2F; (!&#x3D;，不是所以系统都可以用）"></a>不等于 &lt;&gt;&#x2F; (!&#x3D;，不是所以系统都可以用）</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> age,university</span><br><span class="line"><span class="keyword">from</span> user_profile</span><br><span class="line"><span class="keyword">where</span> university<span class="operator">&lt;&gt;</span><span class="string">&#x27;复旦大学&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="为空-is-null"><a href="#为空-is-null" class="headerlink" title="为空 is null"></a>为空 is null</h2><h2 id="不为空-is-not-null-x2F-lt-gt-“”"><a href="#不为空-is-not-null-x2F-lt-gt-“”" class="headerlink" title="不为空 is not null&#x2F; &lt;&gt; “”"></a>不为空 is not null&#x2F; &lt;&gt; “”</h2><h2 id="update-更新数据"><a href="#update-更新数据" class="headerlink" title="update 更新数据"></a>update 更新数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name <span class="keyword">SET</span> field1<span class="operator">=</span><span class="keyword">new</span><span class="operator">-</span>value1, field2<span class="operator">=</span><span class="keyword">new</span><span class="operator">-</span>value2</span><br><span class="line">[<span class="keyword">WHERE</span> Clause]</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> username<span class="operator">=</span><span class="string">&#x27;alin&#x27;</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">6</span></span><br></pre></td></tr></table></figure>

<h2 id="like-查找数据"><a href="#like-查找数据" class="headerlink" title="like 查找数据"></a>like 查找数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2,...fieldN</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> field1 <span class="keyword">LIKE</span> condition1 [<span class="keyword">AND</span> [<span class="keyword">OR</span>]] filed2 <span class="operator">=</span> <span class="string">&#x27;somevalue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">WHERE</span> username <span class="keyword">like</span> <span class="string">&#x27;a%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;%a&#x27;</span>     <span class="operator">/</span><span class="operator">/</span>以a结尾的数据</span><br><span class="line"><span class="string">&#x27;a%&#x27;</span>     <span class="operator">/</span><span class="operator">/</span>以a开头的数据</span><br><span class="line"><span class="string">&#x27;%a%&#x27;</span>    <span class="operator">/</span><span class="operator">/</span>含有a的数据</span><br><span class="line"><span class="string">&#x27;_a_&#x27;</span>    <span class="operator">/</span><span class="operator">/</span>三位且中间字母是a的</span><br><span class="line"><span class="string">&#x27;_a&#x27;</span>     <span class="operator">/</span><span class="operator">/</span>两位且结尾字母是a的</span><br><span class="line"><span class="string">&#x27;a_&#x27;</span>     <span class="operator">/</span><span class="operator">/</span>两位且开头字母是a的</span><br></pre></td></tr></table></figure>

<h2 id="union-操作符，将不同的-select-结果组合到一个结果集中，expresssion-可以不同"><a href="#union-操作符，将不同的-select-结果组合到一个结果集中，expresssion-可以不同" class="headerlink" title="union 操作符，将不同的 select 结果组合到一个结果集中，expresssion 可以不同"></a>union 操作符，将不同的 select 结果组合到一个结果集中，expresssion 可以不同</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> expression1, expression2, ... expression_n</span><br><span class="line"><span class="keyword">FROM</span> tables</span><br><span class="line">[<span class="keyword">WHERE</span> conditions]</span><br><span class="line"><span class="keyword">UNION</span> [<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span>]</span><br><span class="line"><span class="keyword">SELECT</span> expression1, expression2, ... expression_n</span><br><span class="line"><span class="keyword">FROM</span> tables</span><br><span class="line">[<span class="keyword">WHERE</span> conditions];</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">from</span> book</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>

<h2 id="group-by：默认为-asc-升序"><a href="#group-by：默认为-asc-升序" class="headerlink" title="group by：默认为 asc 升序"></a>group by：默认为 asc 升序</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2,...fieldN <span class="keyword">FROM</span> table_name1, table_name2...</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> field1 [<span class="keyword">ASC</span> [<span class="keyword">DESC</span>][默认 <span class="keyword">ASC</span>]], [field2...] [<span class="keyword">ASC</span> [<span class="keyword">DESC</span>][默认 <span class="keyword">ASC</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">from</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> username <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>

<h2 id="group-by-分组统计"><a href="#group-by-分组统计" class="headerlink" title="group by 分组统计"></a>group by 分组统计</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name, <span class="keyword">function</span>(column_name)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name operator <span class="keyword">value</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> column_name;</span><br><span class="line"></span><br><span class="line">#分组求和，而不是整体求和</span><br><span class="line"><span class="keyword">SELECT</span> Customer,OrderDate,<span class="built_in">SUM</span>(OrderPrice)</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Customer,OrderDate</span><br></pre></td></tr></table></figure>

<h2 id="group-by-having"><a href="#group-by-having" class="headerlink" title="group by+having"></a>group by+having</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> emp_no, <span class="built_in">count</span>(salary) t     #在工资表里查找员工编号、统计发工资的次数（取别名t）</span><br><span class="line"><span class="keyword">from</span> salaries</span><br><span class="line"><span class="keyword">where</span> creat_date <span class="keyword">between</span> <span class="string">&#x27;2020-01-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2020-12-31&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> emp_no        #通过员工编号编组</span><br><span class="line"><span class="keyword">HAVING</span> t<span class="operator">&gt;</span><span class="number">15</span>       #查询发工资次数大于<span class="number">15</span>次的</span><br></pre></td></tr></table></figure>

<h2 id="左连接"><a href="#左连接" class="headerlink" title="左连接"></a>左连接</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.bookname, a.pushlishTime, b.usename</span><br><span class="line"><span class="keyword">from</span> Books a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> Author b</span><br><span class="line"><span class="keyword">on</span> a.uid <span class="operator">=</span> b.id</span><br></pre></td></tr></table></figure>

<h2 id="时间控制"><a href="#时间控制" class="headerlink" title="时间控制"></a>时间控制</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>包含当天</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> DATEDIFF(字段,NOW())<span class="operator">&lt;=</span><span class="number">0</span> <span class="keyword">AND</span> DATEDIFF(字段,NOW())<span class="operator">&gt;</span><span class="operator">-</span>n</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>不包含当天</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> DATEDIFF(字段,NOW())<span class="operator">&lt;</span><span class="number">0</span> <span class="keyword">AND</span> DATEDIFF(字段,NOW())<span class="operator">&gt;</span><span class="operator">-</span>n</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.bookname, a.pushlishTime, b.usename</span><br><span class="line"><span class="keyword">from</span> Books a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> Author b</span><br><span class="line"><span class="keyword">on</span> a.uid <span class="operator">=</span> b.id</span><br><span class="line"><span class="keyword">where</span> DATEDIFF(a.updateTime, NOW())<span class="operator">&lt;=</span><span class="number">0</span> <span class="keyword">and</span> DATEDIFF(a.updateTime, NOW())<span class="operator">&gt;</span><span class="number">-7</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a.likes</span><br></pre></td></tr></table></figure>

<h1 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h1><h2 id="InnoDB："><a href="#InnoDB：" class="headerlink" title="InnoDB："></a>InnoDB：</h2><h3 id="优点：提供良好的事务管理，崩溃修复能力和并发控制，3-层即可控制百万级的数据，聚集索引"><a href="#优点：提供良好的事务管理，崩溃修复能力和并发控制，3-层即可控制百万级的数据，聚集索引" class="headerlink" title="优点：提供良好的事务管理，崩溃修复能力和并发控制，3 层即可控制百万级的数据，聚集索引"></a>优点：提供良好的事务管理，崩溃修复能力和并发控制，3 层即可控制百万级的数据，聚集索引</h3><h3 id="缺点：读写能力较差，占用的数据空间大"><a href="#缺点：读写能力较差，占用的数据空间大" class="headerlink" title="缺点：读写能力较差，占用的数据空间大"></a>缺点：读写能力较差，占用的数据空间大</h3><p><img src="/2022/07/08/mysql//image-20220525235957544.png" alt="image-20220525235957544"></p>
<h2 id="MyISAM："><a href="#MyISAM：" class="headerlink" title="MyISAM："></a>MyISAM：</h2><h3 id="优点：插入速度快，内存占用低，-非聚集索引"><a href="#优点：插入速度快，内存占用低，-非聚集索引" class="headerlink" title="优点：插入速度快，内存占用低， 非聚集索引"></a>优点：插入速度快，内存占用低， 非聚集索引</h3><h3 id="缺点：不支持事务，数据分散存储为三个文件"><a href="#缺点：不支持事务，数据分散存储为三个文件" class="headerlink" title="缺点：不支持事务，数据分散存储为三个文件"></a>缺点：不支持事务，数据分散存储为三个文件</h3><p><img src="/2022/07/08/mysql//image-20220525231552462.png" alt="image-20220525231552462"></p>
<p><img src="/2022/07/08/mysql//image-20220525231604086.png" alt="image-20220525231604086"></p>
<h2 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h2><h3 id="存取速度快，利用内存中的数据来建立表，安全性比较低。"><a href="#存取速度快，利用内存中的数据来建立表，安全性比较低。" class="headerlink" title="存取速度快，利用内存中的数据来建立表，安全性比较低。"></a>存取速度快，利用内存中的数据来建立表，安全性比较低。</h3><p><img src="/2022/07/08/mysql//image-20220525231623029.png" alt="image-20220525231623029"></p>
<p><img src="/2022/07/08/mysql//image-20220525231630286.png" alt="image-20220525231630286"></p>
<h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><p>主键索引：唯一、非空</p>
<p>唯一索引：唯一、可为空</p>
<p>普通索引：可以重复、为空</p>
<p>全文索引：</p>
<p>组合索引：组合</p>
<h2 id="B-树和-B-树的区别"><a href="#B-树和-B-树的区别" class="headerlink" title="B 树和 B+树的区别"></a>B 树和 B+树的区别</h2><p>B+树只有叶子节点放置数据，而 B 树所有节点都放置数据</p>
<h2 id="回表"><a href="#回表" class="headerlink" title="回表"></a>回表</h2><p>先去非聚集索引的找到 ID，然后聚集索引查询对应的字段。（先非主键索引，然后主键索引）</p>
<h2 id="覆盖索引（建立组合索引来实现）"><a href="#覆盖索引（建立组合索引来实现）" class="headerlink" title="覆盖索引（建立组合索引来实现）"></a>覆盖索引（建立组合索引来实现）</h2><p>使用覆盖索引，MySQL 只需要通过索引就可以查找和返回查询所需要的数据，而不必在使用索引处理数据之后再进行回表操作。</p>
<h2 id="最左匹配原则"><a href="#最左匹配原则" class="headerlink" title="最左匹配原则"></a>最左匹配原则</h2><h1 id="SQL-删除规则"><a href="#SQL-删除规则" class="headerlink" title="SQL 删除规则"></a>SQL 删除规则</h1><p><img src="/2022/07/08/mysql//image-20220526000006280.png" alt="image-20220526000006280"></p>
<h2 id="cascade-级联删除"><a href="#cascade-级联删除" class="headerlink" title="cascade 级联删除"></a>cascade 级联删除</h2><p>解释：（主表被删除，字表的数据也会删除）</p>
<p>父表中删除包含主键值的行的操作，该值由子表的现有行中的外键列引用。</p>
<p>在级联删除中，删除父表中的记录时，同时删除子表中外键引用此主健的记录。</p>
<p>例子：</p>
<p>employee 表中有员工的 dept_id 引用 department 表中 dept_id( 同时为 deptartment 主键 )作为外键。</p>
<p>当 department 表（父表）中一个部门被删除，employee 表（子表）中引用这个部门的 dept_id 作为 dept_id 的记录也自动被删除。</p>
<h2 id="protect"><a href="#protect" class="headerlink" title="protect"></a>protect</h2><p>不让删除，删除会抛出异常。</p>
<h2 id="set-null"><a href="#set-null" class="headerlink" title="set_null"></a>set_null</h2><p>删除的时候，外键置为空值。</p>
<h2 id="set-default"><a href="#set-default" class="headerlink" title="set_default"></a>set_default</h2><p>外键字段置为默认值。</p>
<h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>自定义值</p>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="1-1-Description"><a href="#1-1-Description" class="headerlink" title="1.1 Description"></a>1.1 Description</h3><p>salary</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">| id | name | sex | salary |</span><br><span class="line">|----|------|-----|--------|</span><br><span class="line">| 1  | A    | m   | 2500   |</span><br><span class="line">| 2  | B    | f   | 1500   |</span><br><span class="line">| 3  | C    | m   | 5500   |</span><br><span class="line">| 4  | D    | f   | 500    |</span><br></pre></td></tr></table></figure>

<p>只用一个 SQL 查询，将 sex 字段反转。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">| id | name | sex | salary |</span><br><span class="line">|----|------|-----|--------|</span><br><span class="line">| 1  | A    | f   | 2500   |</span><br><span class="line">| 2  | B    | m   | 1500   |</span><br><span class="line">| 3  | C    | f   | 5500   |</span><br><span class="line">| 4  | D    | m   | 500    |</span><br></pre></td></tr></table></figure>

<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>两个相等的数异或的结果为 0，而 0 与任何一个数异或的结果为这个数。</p>
<p>sex  字段只有两个取值：’f’ 和 ‘m’，并且有以下规律：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;f&#x27; ^ (&#x27;m&#x27; ^ &#x27;f&#x27;) = &#x27;m&#x27; ^ (&#x27;f&#x27; ^ &#x27;f&#x27;) = &#x27;m&#x27;</span><br><span class="line">&#x27;m&#x27; ^ (&#x27;m&#x27; ^ &#x27;f&#x27;) = &#x27;f&#x27; ^ (&#x27;m&#x27; ^ &#x27;m&#x27;) = &#x27;f&#x27;</span><br></pre></td></tr></table></figure>

<p>因此将 sex 字段和 ‘m’ ^ ‘f’ 进行异或操作，最后就能反转 sex 字段。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> salary</span><br><span class="line"><span class="keyword">SET</span> sex <span class="operator">=</span> <span class="type">CHAR</span>(ASCII(sex) <span class="operator">^</span> ASCII(<span class="string">&#x27;m&#x27;</span>) <span class="operator">^</span> ASCII(<span class="string">&#x27;f&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="1-2-Description"><a href="#1-2-Description" class="headerlink" title="1.2 Description"></a>1.2 Description</h3><p>邮件地址表：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">+----+---------+</span><br><span class="line">| Id | Email   |</span><br><span class="line">+----+---------+</span><br><span class="line">| 1  | john@example.com |</span><br><span class="line">| 2  | bob@example.com |</span><br><span class="line">| 3  | john@example.com |</span><br><span class="line">+----+---------+</span><br></pre></td></tr></table></figure>

<p>删除重复的邮件地址：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">+----+------------------+</span><br><span class="line">| Id | Email            |</span><br><span class="line">+----+------------------+</span><br><span class="line">| 1  | john@example.com |</span><br><span class="line">| 2  | bob@example.com  |</span><br><span class="line">+----+------------------+</span><br></pre></td></tr></table></figure>

<h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>只保留相同 Email 中 Id 最小的那一个，然后删除其它的。</p>
<p>连接查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> p1</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Person p1,</span><br><span class="line">    Person p2</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    p1.Email <span class="operator">=</span> p2.Email</span><br><span class="line">    <span class="keyword">AND</span> p1.Id <span class="operator">&gt;</span> p2.Id</span><br></pre></td></tr></table></figure>

<h3 id="1-3-Description"><a href="#1-3-Description" class="headerlink" title="1.3 Description"></a>1.3 Description</h3><p>Employee 表：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">+----+-------+--------+-----------+</span><br><span class="line">| Id | Name  | Salary | ManagerId |</span><br><span class="line">+----+-------+--------+-----------+</span><br><span class="line">| 1  | Joe   | 70000  | 3         |</span><br><span class="line">| 2  | Henry | 80000  | 4         |</span><br><span class="line">| 3  | Sam   | 60000  | NULL      |</span><br><span class="line">| 4  | Max   | 90000  | NULL      |</span><br><span class="line">+----+-------+--------+-----------+</span><br></pre></td></tr></table></figure>

<p>查找薪资大于其经理薪资的员工信息。</p>
<h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    E1.NAME <span class="keyword">AS</span> Employee</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Employee E1</span><br><span class="line">    <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Employee E2</span><br><span class="line">    <span class="keyword">ON</span> E1.ManagerId <span class="operator">=</span> E2.Id</span><br><span class="line">    <span class="keyword">AND</span> E1.Salary <span class="operator">&gt;</span> E2.Salary;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-Description"><a href="#1-4-Description" class="headerlink" title="1.4 Description"></a>1.4 Description</h3><p>Employee 表：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">+----+-------+--------+--------------+</span><br><span class="line">| Id | Name  | Salary | DepartmentId |</span><br><span class="line">+----+-------+--------+--------------+</span><br><span class="line">| 1  | Joe   | 70000  | 1            |</span><br><span class="line">| 2  | Henry | 80000  | 2            |</span><br><span class="line">| 3  | Sam   | 60000  | 2            |</span><br><span class="line">| 4  | Max   | 90000  | 1            |</span><br><span class="line">+----+-------+--------+--------------+</span><br></pre></td></tr></table></figure>

<p>Department 表：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">+----+----------+</span><br><span class="line">| Id | Name     |</span><br><span class="line">+----+----------+</span><br><span class="line">| 1  | IT       |</span><br><span class="line">| 2  | Sales    |</span><br><span class="line">+----+----------+</span><br></pre></td></tr></table></figure>

<p>查找一个 Department 中收入最高者的信息：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">+------------+----------+--------+</span><br><span class="line">| Department | Employee | Salary |</span><br><span class="line">+------------+----------+--------+</span><br><span class="line">| IT         | Max      | 90000  |</span><br><span class="line">| Sales      | Henry    | 80000  |</span><br><span class="line">+------------+----------+--------+</span><br></pre></td></tr></table></figure>

<h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><p>创建一个临时表，包含了部门员工的最大薪资。可以对部门进行分组，然后使用 MAX() 汇总函数取得最大薪资。</p>
<p>之后使用连接找到一个部门中薪资等于临时表中最大薪资的员工。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    D.NAME Department,</span><br><span class="line">    E.NAME Employee,</span><br><span class="line">    E.Salary</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Employee E,</span><br><span class="line">    Department D,</span><br><span class="line">    ( <span class="keyword">SELECT</span> DepartmentId, <span class="built_in">MAX</span>( Salary ) Salary </span><br><span class="line">     <span class="keyword">FROM</span> Employee </span><br><span class="line">     <span class="keyword">GROUP</span> <span class="keyword">BY</span> DepartmentId ) M</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    E.DepartmentId <span class="operator">=</span> D.Id</span><br><span class="line">    <span class="keyword">AND</span> E.DepartmentId <span class="operator">=</span> M.DepartmentId</span><br><span class="line">    <span class="keyword">AND</span> E.Salary <span class="operator">=</span> M.Salary;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Python</title>
    <url>/2022/05/29/python/</url>
    <content><![CDATA[<h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><p>通过字符串的形式导入模块，利用字符串去寻找类的属性值，可以动态的增加和修改对象中的方法和属性。主要用到了setattr和getattr函数实现。</p>
<p><img src="/2022/05/29/python//image-20220519142513564.png" alt="image-20220519142513564"></p>
<h2 id="广度优先-amp-深度优先算法"><a href="#广度优先-amp-深度优先算法" class="headerlink" title="广度优先&amp;深度优先算法"></a>广度优先&amp;深度优先算法</h2><p>广度优先：一层一层往外扩展。 1、2、3、4、5 、6、7</p>
<p>深度优先：一条路走到黑。1、2、4、5、3、6、7</p>
<p><img src="/2022/05/29/python//image-20220519145022185.png" alt="image-20220519145022185"></p>
<h2 id="redis可能出现的问题"><a href="#redis可能出现的问题" class="headerlink" title="redis可能出现的问题"></a>redis可能出现的问题</h2><p><a href="https://blog.csdn.net/a745233700/article/details/88088669">参考链接</a></p>
<ul>
<li><p>缓存击穿：缓存的值过期或者没有缓存该值，需要向数据库重新发起查询请求。解决方案，重新将查询数据写入缓存。</p>
</li>
<li><p>缓存穿透：缓存和数据库中均没有对应的key，大量请求导致高并发访问数据库。解决方案，将无效的key存为空值，或者使用过滤器，在查询数据库之前，让过滤器验证数据的合法性。</p>
</li>
<li><p>缓存雪崩：如果缓在某一个时刻出现大规模的key失效，那么就会导致大量的请求打在了数据库上面。</p>
<ul>
<li><p>事前：使用不同的过期时间</p>
<ul>
<li>事中：加锁或者使用熔断机制</li>
<li>事后：开启Redis持久化机制，尽快恢复缓存数据</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Python中可变-amp-amp-不可变的数据类型"><a href="#Python中可变-amp-amp-不可变的数据类型" class="headerlink" title="Python中可变&amp;&amp;不可变的数据类型"></a>Python中可变&amp;&amp;不可变的数据类型</h2><p>可变与不可变是根据<strong>更改数据后，内存地址是否发生改变</strong>来判断的，内存地址改变则为不可变。</p>
<p>可变：列表、字典</p>
<p>不可变：数值（int、float、bool）、string（字符串）、tuple（元组）</p>
<h2 id="Python列表相加"><a href="#Python列表相加" class="headerlink" title="Python列表相加"></a>Python列表相加</h2><p>list1 &#x3D; [1,2,3]</p>
<p>list2 &#x3D; [4,5,6]</p>
<ul>
<li><p>]list1+list2</p>
</li>
<li><p>list1.extend(list2)</p>
</li>
<li><p>for i in list2:</p>
<p>list1.append(i)</p>
</li>
</ul>
<h2 id="try…except…else…finally"><a href="#try…except…else…finally" class="headerlink" title="try…except…else…finally"></a>try…except…else…finally</h2><p>有异常的话，执行try、except、finally</p>
<p>无异常的话，执行try、else、finally</p>
<h2 id="new-、init、call"><a href="#new-、init、call" class="headerlink" title="__new__、init、call"></a>__new__、init、call</h2><ul>
<li>__ new __，返回初始化的object</li>
<li>__ init __, 初始化对象</li>
<li>__ call __, 对象当函数执行时，才会执行，比如</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;call&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Student(<span class="string">&#x27;alin&#x27;</span>)</span><br><span class="line">a()</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">call</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p><a href="https://docs.python.org/zh-cn/3/library/re.html#regular-expression-syntax">参考链接</a></p>
<p><a href="https://www.runoob.com/python/python-reg-expressions.html">参考链接</a></p>
<table>
<thead>
<tr>
<th>\d</th>
<th align="left">[0-9]数字，匹配任何十进制数</th>
</tr>
</thead>
<tbody><tr>
<td>\D</td>
<td align="left">[^0-9]，匹配任何非十进制数字的字符</td>
</tr>
<tr>
<td>\s</td>
<td align="left">[ \t\n\r\f\v]，匹配任何Unicode空白字符</td>
</tr>
<tr>
<td>\S</td>
<td align="left">[ ^ \t\n\r\f\v]，匹配任何非空白字符</td>
</tr>
<tr>
<td>\w</td>
<td align="left">匹配字母数字及下划线</td>
</tr>
<tr>
<td>\W</td>
<td align="left">匹配非字母数字及下划线</td>
</tr>
<tr>
<td>.*?</td>
<td align="left">非贪婪</td>
</tr>
<tr>
<td>*</td>
<td align="left">对它前面的正则式匹配0到任意次重复， 尽量多的匹配字符串。<code>ab*</code> 会匹配 <code>&#39;a&#39;</code>，<code>&#39;ab&#39;</code>，或者 <code>&#39;a&#39;</code> 后面跟随任意个 <code>&#39;b&#39;</code>。</td>
</tr>
<tr>
<td>+</td>
<td align="left">对它前面的正则式匹配1到任意次重复。<code>ab+</code> 会匹配 <code>&#39;a&#39;</code> 后面跟随1个以上到任意个 <code>&#39;b&#39;</code>，它不会匹配 <code>&#39;a&#39;</code>。</td>
</tr>
<tr>
<td>？</td>
<td align="left">对它前面的正则式匹配0到1次重复。<code>ab?</code> 会匹配 <code>&#39;a&#39;</code> 或者 <code>&#39;ab&#39;</code>。</td>
</tr>
</tbody></table>
<ol>
<li><strong>search：</strong> 查找任意位置的匹配项</li>
<li><strong>match：</strong> 必须从字符串开头匹配</li>
<li><strong>fullmatch：</strong> 整个字符串与正则完全匹配</li>
<li><strong>sub</strong>:替换字符串 re.sub(pattern, ‘ ‘ , s)</li>
<li><strong>spilt</strong>:re.spilt(pattern, s)</li>
</ol>
<p><img src="/2022/05/29/python//1653817207174.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment">#去除标签 &lt;p&gt;/&lt;div&gt;等</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;&lt;div&gt;\</span></span><br><span class="line"><span class="string">&lt;p&gt;岗位职责：&lt;/p&gt;\</span></span><br><span class="line"><span class="string">&lt;p&gt;完成推荐算法、数据统计、接口、后台等服务器端相关工作&lt;/p&gt;\</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;br&gt;&lt;/p&gt;\</span></span><br><span class="line"><span class="string">&lt;p&gt;必备要求：&lt;/p&gt;\</span></span><br><span class="line"><span class="string">&lt;p&gt;良好的自我驱动力和职业素养，工作积极主动、结果导向&lt;/p&gt;\</span></span><br><span class="line"><span class="string">&lt;p&gt; &lt;br&gt;&lt;/p&gt;\</span></span><br><span class="line"><span class="string">&lt;p&gt;技术要求：&lt;/p&gt;\</span></span><br><span class="line"><span class="string">&lt;p&gt;1、一年以上 Python 开发经验，掌握面向对象分析和设计，了解设计模式&lt;/p&gt;\</span></span><br><span class="line"><span class="string">&lt;p&gt;2、掌握HTTP协议，熟悉MVC、MVVM等概念以及相关WEB开发框架&lt;/p&gt;\</span></span><br><span class="line"><span class="string">&lt;p&gt;3、掌握关系数据库开发设计，掌握 SQL，熟练使用 MySQL/PostgreSQL 中的一种&lt;br&gt;&lt;/p&gt;\</span></span><br><span class="line"><span class="string">&lt;p&gt;4、掌握NoSQL、MQ，熟练使用对应技术解决方案&lt;/p&gt;\</span></span><br><span class="line"><span class="string">&lt;p&gt;5、熟悉 Javascript/CSS/HTML5，JQuery、React、Vue.js&lt;/p&gt;\</span></span><br><span class="line"><span class="string">&lt;p&gt; &lt;br&gt;&lt;/p&gt;\</span></span><br><span class="line"><span class="string">&lt;p&gt;加分项：&lt;/p&gt;\</span></span><br><span class="line"><span class="string">&lt;p&gt;大数据，数理统计，机器学习，sklearn，高性能，大并发。&lt;/p&gt;\</span></span><br><span class="line"><span class="string">&lt;/div&gt; &quot;</span></span><br><span class="line"></span><br><span class="line">p = <span class="string">r&quot;&lt;/?\w+&gt;| &quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.sub(p, <span class="string">&quot; &quot;</span>, s))</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">岗位职责：  </span><br><span class="line">完成推荐算法、数据统计、接口、后台等服务器端相关工作   </span><br><span class="line">必备要求：  良好的自我驱动力和职业素养，工作积极主动、结果导向    </span><br><span class="line">技术要求：  </span><br><span class="line"><span class="number">1</span>、一年以上 Python 开发经验，掌握面向对象分析和设计，了解设计模式  </span><br><span class="line"><span class="number">2</span>、掌握HTTP协议，熟悉MVC、MVVM等概念以及相关WEB开发框架  </span><br><span class="line"><span class="number">3</span>、掌握关系数据库开发设计，掌握 SQL，熟练使用 MySQL/PostgreSQL 中的一种   </span><br><span class="line"><span class="number">4</span>、掌握NoSQL、MQ，熟练使用对应技术解决方案  </span><br><span class="line"><span class="number">5</span>、熟悉 Javascript/CSS/HTML5，JQuery、React、Vue.js    </span><br><span class="line">加分项：  </span><br><span class="line">大数据，数理统计，机器学习，sklearn，高性能，大并发。</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">program = <span class="string">&quot;ywnds:C C++ Java Python&quot;</span></span><br><span class="line">re.split(<span class="string">r&#x27;:| &#x27;</span>, program) <span class="comment"># 冒号或者空格切分</span></span><br><span class="line">---</span><br><span class="line">[<span class="string">&#x27;ywnds&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>]</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h2 id="Xpath-语法"><a href="#Xpath-语法" class="headerlink" title="Xpath 语法"></a>Xpath 语法</h2><p><a href="https://www.w3school.com.cn/xpath/xpath_syntax.asp">参考链接</a></p>
<p><a href="https://www.runoob.com/xpath/xpath-syntax.html">参考链接</a></p>
<table>
<thead>
<tr>
<th align="left">路径表达式</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">bookstore</td>
<td align="left">选取 bookstore 元素的所有子节点。</td>
</tr>
<tr>
<td align="left">&#x2F;bookstore</td>
<td align="left">选取根元素 bookstore。注释：假如路径起始于正斜杠( &#x2F; )，则此路径始终代表到某元素的绝对路径！</td>
</tr>
<tr>
<td align="left">bookstore&#x2F;book</td>
<td align="left">选取属于 bookstore 的子元素的所有 book 元素。</td>
</tr>
<tr>
<td align="left">&#x2F;&#x2F;book</td>
<td align="left">选取所有 book 子元素，而不管它们在文档中的位置。</td>
</tr>
<tr>
<td align="left">bookstore&#x2F;&#x2F;book</td>
<td align="left">选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。</td>
</tr>
<tr>
<td align="left">&#x2F;&#x2F;@lang</td>
<td align="left">选取名为 lang 的所有属性。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">路径表达式</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&#x2F;bookstore&#x2F;book[1]</td>
<td align="left">选取属于 bookstore 子元素的第一个 book 元素。</td>
</tr>
<tr>
<td align="left">&#x2F;bookstore&#x2F;book[last()]</td>
<td align="left">选取属于 bookstore 子元素的最后一个 book 元素。</td>
</tr>
<tr>
<td align="left">&#x2F;bookstore&#x2F;book[last()-1]</td>
<td align="left">选取属于 bookstore 子元素的倒数第二个 book 元素。</td>
</tr>
<tr>
<td align="left">&#x2F;bookstore&#x2F;book[position()&lt;3]</td>
<td align="left">选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td>
</tr>
<tr>
<td align="left">&#x2F;&#x2F;title[@lang]</td>
<td align="left">选取所有拥有名为 lang 的属性的 title 元素。</td>
</tr>
<tr>
<td align="left">&#x2F;&#x2F;title[@lang&#x3D;’eng’]</td>
<td align="left">选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td>
</tr>
<tr>
<td align="left">&#x2F;bookstore&#x2F;book[price&gt;35.00]</td>
<td align="left">选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td>
</tr>
<tr>
<td align="left">&#x2F;bookstore&#x2F;book[price&gt;35.00]&#x2F;&#x2F;title</td>
<td align="left">选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td>
</tr>
</tbody></table>
<h2 id="选取未知节点"><a href="#选取未知节点" class="headerlink" title="选取未知节点"></a>选取未知节点</h2><p>XPath 通配符可用来选取未知的 XML 元素。</p>
<table>
<thead>
<tr>
<th align="left">通配符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">*</td>
<td align="left">匹配任何元素节点。</td>
</tr>
<tr>
<td align="left">@*</td>
<td align="left">匹配任何属性节点。</td>
</tr>
<tr>
<td align="left">node()</td>
<td align="left">匹配任何类型的节点。</td>
</tr>
</tbody></table>
<p>在下面的表格中，我们列出了一些路径表达式，以及这些表达式的结果：</p>
<table>
<thead>
<tr>
<th align="left">路径表达式</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&#x2F;bookstore&#x2F;*</td>
<td align="left">选取 bookstore 元素的所有子元素。</td>
</tr>
<tr>
<td align="left">&#x2F;&#x2F;*</td>
<td align="left">选取文档中的所有元素。</td>
</tr>
<tr>
<td align="left">&#x2F;&#x2F;title[@*]</td>
<td align="left">选取所有带有属性的 title 元素。</td>
</tr>
<tr>
<td align="left">&#x2F;&#x2F;*[@class&#x3D;’content’]</td>
<td align="left">选取所有属性class为content的元素</td>
</tr>
</tbody></table>
<h2 id="上下文管理器"><a href="#上下文管理器" class="headerlink" title="上下文管理器"></a>上下文管理器</h2><p><strong>上下文管理器是指在一段代码执行之前执行一段代码，用于一些预处理工作；执行之后再执行一段代码，用于一些清理工作。有两个方法****enter</strong>和<strong>exit</strong>，分别实现上述两个功能。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义打开文件操作</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyOpen</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, file_name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化方法&quot;&quot;&quot;</span></span><br><span class="line">        self.file_name = file_name</span><br><span class="line">        self.file_handler = <span class="literal">None</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;init****************&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;enter方法，返回file_handler&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;enter:&quot;</span>, self.file_name)</span><br><span class="line">        self.file_handler = <span class="built_in">open</span>(self.file_name, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.file_handler</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;exit方法，关闭文件并返回True&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;exit:&quot;</span>, exc_type, exc_val, exc_tb)</span><br><span class="line">        <span class="keyword">if</span> self.file_handler:</span><br><span class="line">            self.file_handler.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用实例</span></span><br><span class="line"><span class="keyword">with</span> MyOpen(<span class="string">&quot;demo2.py&quot;</span>) <span class="keyword">as</span> file_in:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_in:</span><br><span class="line">        <span class="built_in">print</span>(line)</span><br><span class="line">        <span class="keyword">raise</span> ZeroDivisionError</span><br><span class="line"><span class="comment"># 代码块中主动引发一个除零异常，但整个程序不会引发异常</span></span><br><span class="line">-------------------------</span><br><span class="line">init****************</span><br><span class="line">enter: demo2.py</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, flash, redirect, render_template, request, url_for</span><br><span class="line"></span><br><span class="line">exit: &lt;<span class="keyword">class</span> <span class="string">&#x27;ZeroDivisionError&#x27;</span>&gt;  &lt;traceback <span class="built_in">object</span> at <span class="number">0x0000020C27EF2A00</span>&gt;</span><br><span class="line">-------</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>re</tag>
        <tag>xpath</tag>
        <tag>反射机制</tag>
      </tags>
  </entry>
  <entry>
    <title>redis</title>
    <url>/2022/05/30/redis/</url>
    <content><![CDATA[<h1 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h1><p><img src="/2022/05/30/redis//1644755852532.png" alt="img"></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="备份conf文件，并修改权限为redis用户和redis用户组"><a href="#备份conf文件，并修改权限为redis用户和redis用户组" class="headerlink" title="备份conf文件，并修改权限为redis用户和redis用户组"></a>备份conf文件，并修改权限为redis用户和redis用户组</h3><p><img src="/2022/05/30/redis//1644756290543.png"></p>
<h3 id="conf文件第500行，去掉注释，添加密码"><a href="#conf文件第500行，去掉注释，添加密码" class="headerlink" title="conf文件第500行，去掉注释，添加密码"></a>conf文件第500行，去掉注释，添加密码</h3><p><img src="/2022/05/30/redis//1644757538697.png" alt="img"></p>
<p>通过密码连接redis后，输入ping验证返回pong才为连接成功！</p>
<p><img src="/2022/05/30/redis//1644757884539.png" alt="img"></p>
<p><img src="/2022/05/30/redis//1644757984964.png" alt="img"></p>
<h2 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h2><h2 id="redis命令："><a href="#redis命令：" class="headerlink" title="redis命令："></a>redis命令：</h2><p><img src="/2022/05/30/redis//1644812992612.png" alt="img"></p>
<p><img src="/2022/05/30/redis//1644813042338.png"></p>
<p><img src="/2022/05/30/redis//1644813124017.png"></p>
<p><img src="/2022/05/30/redis//1644813183997.png"></p>
<h1 id="字符串1"><a href="#字符串1" class="headerlink" title="字符串1"></a>字符串1</h1><p><img src="/2022/05/30/redis//1644813353215.png"></p>
<h2 id="设置参数"><a href="#设置参数" class="headerlink" title="设置参数"></a>设置参数</h2><p><img src="/2022/05/30/redis//1644813660462.png" alt="img"></p>
<h2 id="获取key"><a href="#获取key" class="headerlink" title="获取key"></a>获取key</h2><p><img src="/2022/05/30/redis//1644819831236.png" alt="img"></p>
<p><img src="/2022/05/30/redis//1644819822754.png"></p>
<h2 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h2><p><img src="/2022/05/30/redis//1644820728709.png"></p>
<p><img src="/2022/05/30/redis//1644820733978.png"></p>
<h2 id="数值操作"><a href="#数值操作" class="headerlink" title="数值操作"></a>数值操作</h2><p>incrby默认key为0</p>
<p><img src="/2022/05/30/redis//1644999905406.png" alt="img"></p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p><img src="/2022/05/30/redis//1645000061220.png"></p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p><img src="/2022/05/30/redis//1645000389374.png"></p>
<p>1、keys *</p>
<p>2、set trill:username user001, get trill:username</p>
<p>3、strlen trill:username</p>
<p>4、mset trill:username xx</p>
<p>5、exists trill:username</p>
<p>6、incrby fans 10</p>
<p>7、incr fans 2次</p>
<p>8、decrby fans 3</p>
<p>9、decr fans 1次</p>
<p>10、flushdb</p>
<p>11、flushall</p>
<h1 id="字符串2"><a href="#字符串2" class="headerlink" title="字符串2"></a>字符串2</h1><p>ex命令只有在字符串中才存在，若想其他key也支持，需要手动指定</p>
<p><img src="/2022/05/30/redis//1645002714084.png"></p>
<h2 id="ttl-key（检查过期时间，-persist-key过期变为不过期）"><a href="#ttl-key（检查过期时间，-persist-key过期变为不过期）" class="headerlink" title="ttl key（检查过期时间， persist key过期变为不过期）"></a>ttl key（检查过期时间， persist key过期变为不过期）</h2><p><img src="/2022/05/30/redis//1645002896436.png"></p>
<h2 id="惰性删除（不是等到key过期就直接删除，而是请求key的时候判断是否过期）"><a href="#惰性删除（不是等到key过期就直接删除，而是请求key的时候判断是否过期）" class="headerlink" title="惰性删除（不是等到key过期就直接删除，而是请求key的时候判断是否过期）"></a>惰性删除（不是等到key过期就直接删除，而是请求key的时候判断是否过期）</h2><p><img src="/2022/05/30/redis//1645015457811.png"></p>
<h2 id="定期删除，随机采样删除数据库中的数据"><a href="#定期删除，随机采样删除数据库中的数据" class="headerlink" title="定期删除，随机采样删除数据库中的数据"></a>定期删除，随机采样删除数据库中的数据</h2><p><img src="/2022/05/30/redis//1645016084355.png"></p>
<p><img src="/2022/05/30/redis//1645015924165.png"></p>
<h2 id="主动删除机制（默认为no-enviction机制，不让继续写入，但是可以删除key）"><a href="#主动删除机制（默认为no-enviction机制，不让继续写入，但是可以删除key）" class="headerlink" title="主动删除机制（默认为no-enviction机制，不让继续写入，但是可以删除key）"></a>主动删除机制（默认为no-enviction机制，不让继续写入，但是可以删除key）</h2><p><img src="/2022/05/30/redis//1645016832585.png"></p>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><img src="/2022/05/30/redis//1645017622788.png"></p>
<p><img src="/2022/05/30/redis//1645018488072.png"></p>
<p><img src="/2022/05/30/redis//1645017694612.png" alt="img"></p>
<p><img src="/2022/05/30/redis//1645020756449.png"></p>
<p><img src="/2022/05/30/redis//1645020952979.png"></p>
<p><img src="/2022/05/30/redis//1645021160696.png"></p>
<p><img src="/2022/05/30/redis//1645021252577.png"></p>
<p><img src="/2022/05/30/redis//1645022325024.png"></p>
<h2 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h2><p><img src="/2022/05/30/redis//1645024743629.png" alt="img"></p>
<p>1、keys *</p>
<p>2、RPUSH spider 1 2</p>
<p>3、lrange spider 0 -1</p>
<p>4、llen spider</p>
<p>5、lset spider 0 01</p>
<p>6、linsert spider after 04 02</p>
<p>7、rpop spider</p>
<p>8、lrem spider 0 02</p>
<p>9、ltrim spider 0 2</p>
<h1 id="pyredis操作"><a href="#pyredis操作" class="headerlink" title="pyredis操作"></a>pyredis操作</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><img src="/2022/05/30/redis//1645161722169.png"></p>
<h2 id="代码中使用方法"><a href="#代码中使用方法" class="headerlink" title="代码中使用方法"></a>代码中使用方法</h2><p><img src="/2022/05/30/redis//1645161776289.png"></p>
<h1 id="位图"><a href="#位图" class="headerlink" title="位图"></a>位图</h1><p><img src="/2022/05/30/redis//1645171869946.png" alt="img"></p>
<p><img src="/2022/05/30/redis//1645171935518.png"></p>
<h2 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h2><p>setbit，key不存在时，全部默认初始化为0，长度为 8 的倍数。</p>
<p> <img src="/2022/05/30/redis//1645172436427.png"></p>
<p><img src="/2022/05/30/redis//1645172595105.png"></p>
<h2 id="字节索引，-8位为一个字节，前8位为0，接着8为为1，以此类推"><a href="#字节索引，-8位为一个字节，前8位为0，接着8为为1，以此类推" class="headerlink" title="字节索引， 8位为一个字节，前8位为0，接着8为为1，以此类推"></a>字节索引， 8位为一个字节，前8位为0，接着8为为1，以此类推</h2><p><img src="/2022/05/30/redis//1645172650634.png"></p>
<p><img src="/2022/05/30/redis//1645172868091.png"></p>
<p><img src="/2022/05/30/redis//1645172895802.png"></p>
<p><img src="/2022/05/30/redis//1645172968966.png"></p>
<h1 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h1><p><img src="/2022/05/30/redis//1645189817987.png"></p>
<h2 id="特点条件下，比如用户有姓名、身份证号，电话号码啥的多个信息，可以使用hash，更加节约内存，同时也比查找多个字符串更加快速的获取字段值。"><a href="#特点条件下，比如用户有姓名、身份证号，电话号码啥的多个信息，可以使用hash，更加节约内存，同时也比查找多个字符串更加快速的获取字段值。" class="headerlink" title="特点条件下，比如用户有姓名、身份证号，电话号码啥的多个信息，可以使用hash，更加节约内存，同时也比查找多个字符串更加快速的获取字段值。"></a>特点条件下，比如用户有姓名、身份证号，电话号码啥的多个信息，可以使用hash，更加节约内存，同时也比查找多个字符串更加快速的获取字段值。</h2><p>缺点是过期只能将所有的保存信息进行过期操作，而不能对单个信息进行过期操作。+</p>
<p><img src="/2022/05/30/redis//1645241753956.png" alt="img"></p>
<h2 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h2><p><img src="/2022/05/30/redis//1645242100281.png"></p>
<p><img src="/2022/05/30/redis//1645242121991.png"></p>
<p><img src="/2022/05/30/redis//1645242396590.png"></p>
<p><img src="/2022/05/30/redis//1645242261452.png" alt="img"></p>
<h2 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h2><p><img src="/2022/05/30/redis//1645242547812.png"></p>
<p><img src="/2022/05/30/redis//1645242586733.png"></p>
<h2 id="Python中hash算法处理过程"><a href="#Python中hash算法处理过程" class="headerlink" title="Python中hash算法处理过程"></a>Python中hash算法处理过程</h2><p><img src="/2022/05/30/redis//1645275342085.png"></p>
<h2 id="redis中hash算法处理流程"><a href="#redis中hash算法处理流程" class="headerlink" title="redis中hash算法处理流程"></a>redis中hash算法处理流程</h2><p>位置重复时，采用多重链表来解决</p>
<p><img src="/2022/05/30/redis//1645275652961.png"></p>
<h1 id="集合（无序，去重）"><a href="#集合（无序，去重）" class="headerlink" title="集合（无序，去重）"></a>集合（无序，去重）</h1><h2 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h2><p><img src="/2022/05/30/redis//1645275970650.png"></p>
<p><img src="/2022/05/30/redis//1645276039575.png"></p>
<p>8、将元素从一个集合转移到另一个集合</p>
<p>9、差集依照左边为标准</p>
<p><img src="/2022/05/30/redis//1645276712258.png" alt="img">‘<img src="/2022/05/30/redis//1645276849544.png"></p>
<h2 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h2><p><img src="/2022/05/30/redis//1645276951590.png"></p>
<h2 id="底层实现（A、纯数字-intset-B、有字符串-hashtable）"><a href="#底层实现（A、纯数字-intset-B、有字符串-hashtable）" class="headerlink" title="底层实现（A、纯数字 intset  B、有字符串 hashtable）"></a>底层实现（A、纯数字 intset  B、有字符串 hashtable）</h2><p><img src="/2022/05/30/redis//1645277321431.png"></p>
<h1 id="有序集合"><a href="#有序集合" class="headerlink" title="有序集合"></a>有序集合</h1><p><img src="/2022/05/30/redis//1645278974341.png"></p>
<h2 id="常用命令-4"><a href="#常用命令-4" class="headerlink" title="常用命令"></a>常用命令</h2><p><img src="/2022/05/30/redis//1645279080388.png"></p>
<p><img src="/2022/05/30/redis//1645280110323.png"></p>
<p><img src="/2022/05/30/redis//1645280515092.png"></p>
<p><img src="/2022/05/30/redis//1645280594502.png"></p>
<p>weight操作时，先根据权重转换集合对应的值，然后在进行聚合运算</p>
<p><img src="/2022/05/30/redis//1645281523322.png"></p>
<h2 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a>应用场景</h2><p><img src="/2022/05/30/redis//1645282127518.png" alt="img"></p>
]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>rest_framework回顾</title>
    <url>/2022/05/26/rest_framework%E5%9B%9E%E9%A1%BE/</url>
    <content><![CDATA[<h2 id="1-restful-api-回顾"><a href="#1-restful-api-回顾" class="headerlink" title="1.restful api 回顾"></a>1.restful api 回顾</h2><p><strong>as_view -&gt; dispatch -&gt; Request 封装 -&gt; version&#x2F;auth&#x2F;permission&#x2F;throttle 等认证</strong></p>
<h3 id="1-1-APIView-原始方案，没有-serializer-save-方法，需要手动保存，可以使用。"><a href="#1-1-APIView-原始方案，没有-serializer-save-方法，需要手动保存，可以使用。" class="headerlink" title="1.1 APIView 原始方案，没有 serializer.save 方法，需要手动保存，可以使用。"></a>1.1 APIView 原始方案，没有 serializer.save 方法，需要手动保存，可以使用。</h3><h4 id="Serializer-添加自定义验证"><a href="#Serializer-添加自定义验证" class="headerlink" title="Serializer 添加自定义验证"></a>Serializer 添加自定义验证</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">phone_validator</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> re.match(<span class="string">r&#x27;^(1[3|4|5|6|7|8|9])\d&#123;9&#125;$&#x27;</span>, value):</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;手机号格式错误&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneSerializer</span>(serializers.Serializer):</span><br><span class="line">    phone = serializers.CharField(label=<span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">                                  validators=[phone_validator, ])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneSerializer</span>(serializers.Serializer):</span><br><span class="line">    phone = serializers.CharField()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_phone</span>(<span class="params">self, value</span>):</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> re.match(<span class="string">r&#x27;^1([3|4|5|6|7|8|9])\d&#123;9&#125;$&#x27;</span>, value):</span><br><span class="line">          <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;手机号格式错误&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="ModelSerializer-添加自定义验证"><a href="#ModelSerializer-添加自定义验证" class="headerlink" title="ModelSerializer 添加自定义验证"></a>ModelSerializer 添加自定义验证</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneModelSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_phone</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.match(<span class="string">r&#x27;^1([3|4|5|6|7|8|9])\d&#123;9&#125;$&#x27;</span>, value):</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;手机号格式错误&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.UserInfo</span><br><span class="line">        fields = [<span class="string">&#x27;phone&#x27;</span>,]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserModelSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.UserInfo</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        user_list = models.UserInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">        ser = UserModelSerializer(instance=user_list,many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        ser = UserModelSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> ser.is_valid():</span><br><span class="line">            <span class="comment"># models.UserInfo.objects.create(**ser.validated_data)</span></span><br><span class="line">            ser.save(user_id=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> Response(ser.data)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.errors)</span><br></pre></td></tr></table></figure>

<h3 id="1-2-ListAPIView，自带-get-函数"><a href="#1-2-ListAPIView，自带-get-函数" class="headerlink" title="1.2 ListAPIView，自带 get 函数"></a>1.2 ListAPIView，自带 get 函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ListAPIView,CreateAPIView,RetrieveAPIView,UpdateAPIView,DestroyAPIView</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NewTestModelSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.News</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewTestView</span>(CreateAPIView,ListAPIView):</span><br><span class="line">    serializer_class = NewTestModelSerializer</span><br><span class="line">    queryset = models.News.objects.<span class="built_in">filter</span>(id__gt=<span class="number">4</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="1-2-1-用户传递某些值"><a href="#1-2-1-用户传递某些值" class="headerlink" title="1.2.1 用户传递某些值"></a>1.2.1 用户传递某些值</h4><p>传入数据为 3 个，数据库表为 4 个，重写 perform_create 函数，传入额外的参数即可。</p>
<p>创建用户时，自己在后台生成一个 UID。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NewTestModelSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.News</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewTestView</span>(CreateAPIView,ListAPIView):</span><br><span class="line">    serializer_class = NewTestModelSerializer</span><br><span class="line">    queryset = models.News.objects.<span class="built_in">filter</span>(id__gt=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perform_create</span>(<span class="params">self, serializer</span>):</span><br><span class="line">        serializer.save(uid=<span class="built_in">str</span>(uuid.uuid4()))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="1-2-2-fields-和-exclude-的区别？"><a href="#1-2-2-fields-和-exclude-的区别？" class="headerlink" title="1.2.2 fields 和 exclude 的区别？"></a>1.2.2 fields 和 exclude 的区别？</h4><p>通过 fields 和 exclude 定制页面展示数据。</p>
<p>需求：只显示用户表的 id,name,age 的数据，其他不显示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NewTestModelSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.News</span><br><span class="line">        <span class="comment"># fields = [&quot;id&quot;,&quot;name&quot;,&#x27;age&#x27;]</span></span><br><span class="line">        <span class="comment"># fields = &quot;__all__&quot;</span></span><br><span class="line">        exclude = [<span class="string">&#x27;gender&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewTestView</span>(<span class="title class_ inherited__">ListAPIView</span>):</span><br><span class="line">    serializer_class = NewTestModelSerializer</span><br><span class="line">    queryset = models.User.objects.<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    &#123;<span class="built_in">id</span>:<span class="number">1</span>,name:<span class="string">&#x27;xxx&#x27;</span>,age:<span class="number">18</span>&#125;,</span><br><span class="line">    &#123;<span class="built_in">id</span>:<span class="number">1</span>,name:<span class="string">&#x27;xxx&#x27;</span>,age:<span class="number">11</span>&#125;,</span><br><span class="line">    &#123;<span class="built_in">id</span>:<span class="number">1</span>,name:<span class="string">&#x27;xxx&#x27;</span>,age:<span class="number">99</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>需求：数据库有 5 个字段，显示 7 个字段。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NewTestModelSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    xx = serializers.CharField(source=<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    <span class="comment"># 自定义数据，配合get_x1使用</span></span><br><span class="line">    x1 = serializers.SerializerMethodField()</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.News</span><br><span class="line">        <span class="comment"># fields = &quot;__all__&quot;</span></span><br><span class="line">        <span class="comment"># fields = [&#x27;id&#x27;,&#x27;name&#x27;,&#x27;age&#x27;,&#x27;gender&#x27;,&#x27;phone&#x27;,&#x27;xx&#x27;,&#x27;x1&#x27;]</span></span><br><span class="line">        exclude = [<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_x1</span>(<span class="params">self,obj</span>):</span><br><span class="line">        <span class="keyword">return</span> obj.<span class="built_in">id</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewTestView</span>(<span class="title class_ inherited__">ListAPIView</span>):</span><br><span class="line">    serializer_class = NewTestModelSerializer</span><br><span class="line">    queryset = models.User.objects.<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    &#123;<span class="built_in">id</span>:<span class="number">1</span>,name:<span class="string">&#x27;xxx&#x27;</span>,age:<span class="number">18.</span>..   xx:<span class="number">1</span>,x1:<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="built_in">id</span>:<span class="number">2</span>,name:<span class="string">&#x27;xxx&#x27;</span>,age:<span class="number">11.</span>..   xx:<span class="number">2</span>,x1:<span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="built_in">id</span>:<span class="number">3</span>,name:<span class="string">&#x27;xxx&#x27;</span>,age:<span class="number">99</span>,     xx:<span class="number">3</span>,x1:<span class="number">3</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="1-2-3-read-only"><a href="#1-2-3-read-only" class="headerlink" title="1.2.3 read_only"></a>1.2.3 read_only</h4><p>添加时不要，查看时候需要。</p>
<p>需求：编写两个接口 添加（3 字段）、获取列表（5 个字段）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NewTestModelSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="comment"># phone = serializers.CharField(source=&#x27;phone&#x27;,read_only=True)</span></span><br><span class="line">    <span class="comment"># email = serializers.CharField(source=&#x27;email&#x27;,read_only=True)</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.News</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br><span class="line">        read_only_fields = [<span class="string">&#x27;phone&#x27;</span>,<span class="string">&#x27;email&#x27;</span>,]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewTestView</span>(CreateAPIView, ListAPIView):</span><br><span class="line">    serializer_class = NewTestModelSerializer</span><br><span class="line">    queryset = models.User.objects.<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line">添加：</span><br><span class="line">	&#123;</span><br><span class="line">        name:<span class="string">&#x27;xx&#x27;</span>,</span><br><span class="line">        age:<span class="string">&#x27;19&#x27;</span>,</span><br><span class="line">        gender:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">获取：</span><br><span class="line">	[</span><br><span class="line">        &#123;name:<span class="string">&#x27;xx&#x27;</span>,age:<span class="string">&#x27;xx&#x27;</span>,gender:<span class="string">&#x27;&#x27;</span>,phone:<span class="string">&#x27;xx&#x27;</span>,email:xxx&#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>

<h4 id="1-2-4-复杂需求"><a href="#1-2-4-复杂需求" class="headerlink" title="1.2.4 复杂需求"></a>1.2.4 复杂需求</h4><p>添加时用一个 serializers、列表时用一个 serializers</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NewTestModelSerializer1</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.News</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewTestModelSerializer2</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.News</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewTestView</span>(CreateAPIView, ListAPIView):</span><br><span class="line">    queryset = models.User.objects.<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">get_serializer_class</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> NewTestModelSerializer1</span><br><span class="line">        <span class="keyword">if</span> self.request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> NewTestModelSerializer2</span><br></pre></td></tr></table></figure>

<h4 id="1-2-5-serializers-嵌套"><a href="#1-2-5-serializers-嵌套" class="headerlink" title="1.2.5 serializers 嵌套"></a>1.2.5 serializers 嵌套</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CreateNewsTopicModelSerializer</span>(serializers.Serializer):</span><br><span class="line">    key = serializers.CharField()</span><br><span class="line">    cos_path = serializers.CharField()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreateNewsModelSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    imageList = CreateNewsTopicModelSerializer(many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.News</span><br><span class="line">        exclude = [<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;viewer_count&#x27;</span>, <span class="string">&#x27;comment_count&#x27;</span>,<span class="string">&quot;favor_count&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        <span class="comment"># 把imageList切走</span></span><br><span class="line">        image_list = validated_data.pop(<span class="string">&#x27;imageList&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建New表中的数据</span></span><br><span class="line">        news_object = models.News.objects.create(**validated_data)</span><br><span class="line"></span><br><span class="line">        data_list = models.NewsDetail.objects.bulk_create(</span><br><span class="line">            [models.NewsDetail(**info, news=news_object) <span class="keyword">for</span> info <span class="keyword">in</span> image_list]</span><br><span class="line">        )</span><br><span class="line">        news_object.imageList = data_list</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> news_object.topic:</span><br><span class="line">            news_object.topic.count += <span class="number">1</span></span><br><span class="line">            news_object.save()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> news_object</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewsView</span>(<span class="title class_ inherited__">CreateAPIView</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    发布动态</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    serializer_class = CreateNewsModelSerializer</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perform_create</span>(<span class="params">self, serializer</span>):</span><br><span class="line">        <span class="comment"># 只能保存：News表中的数据（）</span></span><br><span class="line">        <span class="comment"># 调用serializer对象的save（先调用create）</span></span><br><span class="line">        new_object = serializer.save(user_id=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> new_object</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2022/05/26/rest_framework%E5%9B%9E%E9%A1%BE//1651713380867.png" alt="1651713380867"></p>
]]></content>
      <categories>
        <category>django</category>
        <category>rest_framework</category>
      </categories>
      <tags>
        <tag>rest_framework</tag>
      </tags>
  </entry>
  <entry>
    <title>rest_framework 规范</title>
    <url>/2022/05/26/rest_framework%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<p>rest_framework 规范</p>
<ul>
<li><p>尽量使用https协议而不是http，保障数据安全</p>
</li>
<li><p>尽量将api部署在专用域名下，如果api没有进一步扩展，可以放在主域名下。</p>
<ul>
<li><a href="https://api.example.com/">https://api.example.com/</a></li>
<li><a href="https://example.com/api/">https://example.com/api/</a></li>
</ul>
</li>
<li><p>将api版本放入路径中</p>
<ul>
<li><a href="https://example.com/api/v1/">https://example.com/api/v1/</a></li>
</ul>
</li>
<li><p>路径中，尽量使用资源对应的名词，而不是动词</p>
</li>
<li><p>请求方式区分不同的操作，get&#x2F;post&#x2F;put(patch)&#x2F;detelt&#x2F;head&#x2F;options</p>
</li>
<li><p>api应该提供参数，过滤返回的数据</p>
</li>
<li><p>返回数据中带状态码</p>
<ul>
<li>200 操作成功</li>
<li>201 create 创建&#x2F;修改数据成功</li>
<li>301 永久重定向</li>
<li>302 临时重定向</li>
<li>400 用户请求有误</li>
<li>403 Forbidden用户被禁止访问</li>
<li>404 Not Found 找不到请求的网页</li>
<li>500 Internal server error 服务器内部错误</li>
</ul>
</li>
<li><p>错误处理，状态码是4xx是，应返回错误信息</p>
</li>
<li><p>返回信息中添加链接，让用户可以不查看文档就可以知道下一步做什么</p>
</li>
<li><p>返回结果符合规范</p>
<ul>
<li>GET &#x2F;source 返回资源对象列表（数组）</li>
<li>GET &#x2F;source&#x2F;num 返回单个资源对象</li>
<li>POST 返回新生成的资源对象</li>
<li>PUT &#x2F;source&#x2F;num 返回完整的资源对象</li>
<li>PATCH &#x2F;source&#x2F;num 返回完整的资源对象</li>
<li>DELETE &#x2F;source&#x2F;num 返回空文档</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>django</category>
        <category>rest_framework</category>
      </categories>
      <tags>
        <tag>rest_framework</tag>
      </tags>
  </entry>
  <entry>
    <title>rest_framework</title>
    <url>/2022/05/30/restframework/</url>
    <content><![CDATA[<h1 id="RestFrameWork"><a href="#RestFrameWork" class="headerlink" title="RestFrameWork"></a>RestFrameWork</h1><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="/2022/05/30/restframework//1648878943995.png" alt="img"></p>
<h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><ol>
<li><p>问题：有些API需要用户登陆成功后才可以访问，有些无需登录便可访问</p>
</li>
<li><p>解决方案</p>
<ul>
<li>创建两张表（user， token)</li>
<li>用户登录（返回token并保存到数据库）</li>
</ul>
</li>
<li><p>认证流程图，如图</p>
</li>
<li><p>使用方法</p>
<ul>
<li>局部使用 &amp; 全局使用</li>
<li>匿名的时候，request.user、auth 为 None</li>
</ul>
</li>
<li><p>内置认证类</p>
<ul>
<li>认证类，必须继承于：from rest_framework.authentication import BaseAuthentication</li>
<li>其他认证类：BasicAuthentication，SessionAuthentication</li>
</ul>
</li>
</ol>
<h3 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h3><ul>
<li><p>创建类，继承 BaseAuthentication，实现 authenticate 方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Authication</span>(<span class="title class_ inherited__">BaseAuthentication</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">authenticate</span>(<span class="params">self, request</span>):</span><br><span class="line">        token = request._request.GET.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">        token_obj = models.UserToken.objects.<span class="built_in">filter</span>(token=token).first()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> token_obj:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(<span class="string">&#x27;用户认证失败!&#x27;</span>)</span><br><span class="line">        <span class="comment"># rest_framework 内部会将两个字段赋给 request, 以便后续使用</span></span><br><span class="line">        <span class="comment"># 分别为 self.user, self.auth</span></span><br><span class="line">        <span class="keyword">return</span> (token_obj.user, token_obj)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">authenticate_header</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>返回值：</p>
<ul>
<li>None</li>
<li>raise excetion</li>
</ul>
</li>
<li><p>局部使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OrderView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    订单相关业务</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    authentication_classes = [Authication, ]</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="number">1</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;pwd&#x27;</span>: <span class="number">123</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="number">2</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;pwd&#x27;</span>: <span class="number">123</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        ret = &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1000</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;data&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ret[<span class="string">&#x27;data&#x27;</span>] = self.data</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(ret)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>全局使用 setting.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 全局认证，若某个类不需要，可以设置authentication_classes为[]</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [<span class="string">&#x27;api.auth.Authentication.FirstAuthication&#x27;</span>,</span><br><span class="line">                                       <span class="string">&#x27;api.auth.Authentication.Authication&#x27;</span>],</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;UNAUTHENTICATED_USER&#x27;</span>: <span class="literal">None</span>,  <span class="comment"># 匿名，request.user = None</span></span><br><span class="line">    <span class="string">&#x27;UNAUTHENTICATED_TOKEN&#x27;</span>: <span class="literal">None</span>,  <span class="comment"># 匿名 request.auth = None</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="源码流程"><a href="#源码流程" class="headerlink" title="源码流程"></a>源码流程</h3><p>dispatch -&gt; 封装request -&gt; request.user -&gt; authentication_classes -&gt; authentication_classes</p>
<h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyPermission</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_permission</span>(<span class="params">self, request, view</span>):</span><br><span class="line">        <span class="keyword">if</span> request.user.user_type != <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h3 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 全局认证，若某个类不需要，可以设置authentication_classes为[]</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [<span class="string">&#x27;api.auth.Authentication.FirstAuthication&#x27;</span>,</span><br><span class="line">                                       <span class="string">&#x27;api.auth.Authentication.Authication&#x27;</span>],</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;UNAUTHENTICATED_USER&#x27;</span>: <span class="literal">None</span>,  <span class="comment"># 匿名，request.user = None</span></span><br><span class="line">    <span class="string">&#x27;UNAUTHENTICATED_TOKEN&#x27;</span>: <span class="literal">None</span>,  <span class="comment"># 匿名 request.auth = None</span></span><br><span class="line">    <span class="string">&quot;DEFAULT_PERMISSION_CLASSES&quot;</span>: [<span class="string">&#x27;api.auth.permission.MyPermission&#x27;</span>, ],  <span class="comment"># permission</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: [<span class="string">&#x27;api.auth.throttle.VisitThrottle&#x27;</span>],  <span class="comment"># 频率</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="频率"><a href="#频率" class="headerlink" title="频率"></a>频率</h2><ul>
<li>类，继承于：BaseThrottle，实现 allow_request、wait函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VisitThrottle</span>(<span class="title class_ inherited__">BaseThrottle</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    60S内只能访问3次</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.history = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">allow_request</span>(<span class="params">self, request, view</span>):</span><br><span class="line">        ip = request.META.get(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>)</span><br><span class="line">        ctime = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ip <span class="keyword">not</span> <span class="keyword">in</span> VISIT_RECORD:</span><br><span class="line">            <span class="comment"># 将第一次访问的时间加入</span></span><br><span class="line">            VISIT_RECORD[ip] = [ctime, ]</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        history = VISIT_RECORD.get(ip)</span><br><span class="line">        self.history = history</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> history <span class="keyword">and</span> history[-<span class="number">1</span>] &lt; ctime - <span class="number">60</span>:</span><br><span class="line">            <span class="comment"># 判断history是否有值，且最后一个值的时间是否小于60s，小于则可以移除</span></span><br><span class="line">            history.pop()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(history) &lt; <span class="number">3</span>:</span><br><span class="line">            VISIT_RECORD[ip].insert(<span class="number">0</span>, ctime)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wait</span>(<span class="params">self</span>):</span><br><span class="line">        ctime = time.time()</span><br><span class="line">        <span class="keyword">return</span> <span class="number">60</span> - (ctime - self.history[-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<ul>
<li>类，继承于: SimpleRateThrottle，实现get_cache_key函数，并且修改setting配置</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IpThrottle</span>(<span class="title class_ inherited__">SimpleRateThrottle</span>):</span><br><span class="line">scope = <span class="string">&#x27;ip&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cache_key</span>(<span class="params">self, request, view</span>):</span><br><span class="line">    <span class="comment"># 通过ip来控制访问频率</span></span><br><span class="line">    <span class="keyword">return</span> self.get_ident(request)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserThrottle</span>(<span class="title class_ inherited__">SimpleRateThrottle</span>):</span><br><span class="line">scope = <span class="string">&#x27;user&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cache_key</span>(<span class="params">self, request, view</span>):</span><br><span class="line">    <span class="comment"># 用户名</span></span><br><span class="line">    <span class="keyword">return</span> request.user.username</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;ip&#x27;</span>: <span class="string">&#x27;3/m&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;5/m&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="重要程度"><a href="#重要程度" class="headerlink" title="重要程度"></a>重要程度</h1><ul>
<li>版本        *</li>
<li>解析器     *</li>
<li>序列化     ****<ul>
<li>请求数据校验</li>
<li>QuerySet序列化</li>
</ul>
</li>
<li>分页        **</li>
<li>路由        **</li>
<li>视图        **</li>
<li>渲染器     *</li>
</ul>
<h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><h3 id="BaseVersioning使用（version在url中以get参数形式传递）"><a href="#BaseVersioning使用（version在url中以get参数形式传递）" class="headerlink" title="BaseVersioning使用（version在url中以get参数形式传递）"></a>BaseVersioning使用（version在url中以get参数形式传递）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.versioning <span class="keyword">import</span> BaseVersioning</span><br><span class="line"></span><br><span class="line"><span class="comment"># http://127.0.0.1:8000/order/?token=49713936b12fe71833dcfbbc9ce9b81e&amp;version=v1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ParameVersion</span>(<span class="title class_ inherited__">BaseVersioning</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">determine_version</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        version = request.query_params.get(<span class="string">&#x27;version&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> version</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OrderView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    订单相关业务</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 全局认证前提下，若不需要认证局部处理方案， 设置authentication_classes为[]</span></span><br><span class="line">    authentication_classes = [Authication, ]</span><br><span class="line">    <span class="comment"># 设置权限，只有SVIP才可以访问订单</span></span><br><span class="line">    <span class="comment"># permission_classes = [MyPermission, ]</span></span><br><span class="line">    throttle_classes = [UserThrottle, ]</span><br><span class="line"></span><br><span class="line">    versioning_class = ParameVersion</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_VERSION&#x27;</span>: <span class="string">&#x27;v1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ALLOWED_VERSIONS&#x27;</span>: [<span class="string">&#x27;v1&#x27;</span>, <span class="string">&#x27;v2&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;VERSION_PARAM&#x27;</span>: <span class="string">&#x27;version&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="QueryParameterVersioning-控制版本范围"><a href="#QueryParameterVersioning-控制版本范围" class="headerlink" title="QueryParameterVersioning 控制版本范围"></a>QueryParameterVersioning 控制版本范围</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">versioning_clas = QueryParameterVersioning</span><br><span class="line"></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    &#x27;DEFAULT_VERSION&#x27;: &#x27;v1&#x27;,</span><br><span class="line">    &#x27;ALLOWED_VERSIONS&#x27;: [&#x27;v1&#x27;, &#x27;v2&#x27;],</span><br><span class="line">    &#x27;VERSION_PARAM&#x27;: &#x27;version&#x27;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="URLPathVersioning（通过url路径来控制版本）"><a href="#URLPathVersioning（通过url路径来控制版本）" class="headerlink" title="URLPathVersioning（通过url路径来控制版本）"></a>URLPathVersioning（通过url路径来控制版本）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># urls.py</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&#x27;admin/&#x27;, admin.site.urls),</span><br><span class="line">    path(&#x27;api/v1/auth/&#x27;, AuthView.as_view()),</span><br><span class="line">    re_path(r&#x27;api/(?P&lt;version&gt;[v1|v2]+)/order/&#x27;, OrderView.as_view()),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">#setting</span><br><span class="line"></span><br><span class="line">&#x27;DEFAULT_VERSION_CLASS&#x27;: &#x27;rest_framework.versioning.URLPathVersioning&#x27;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="反向生成url"><a href="#反向生成url" class="headerlink" title="反向生成url"></a>反向生成url</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;api/(?P&lt;version&gt;[v1|v2]+)/order/&#x27;</span>, OrderView.as_view(), name=<span class="string">&#x27;order&#x27;</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取版本</span></span><br><span class="line"><span class="built_in">print</span>(request.version)</span><br><span class="line"><span class="comment"># 获取版本处理对象</span></span><br><span class="line"><span class="built_in">print</span>(request.versioning_scheme)</span><br><span class="line"><span class="comment"># 反向生成url</span></span><br><span class="line">url = request.versioning_scheme.reverse(viewname=<span class="string">&#x27;order&#x27;</span>, request=request)</span><br><span class="line"><span class="built_in">print</span>(url)</span><br></pre></td></tr></table></figure>

<h2 id="解析器"><a href="#解析器" class="headerlink" title="解析器"></a>解析器</h2><ol>
<li>获取用户请求</li>
<li>获取用户请求体</li>
<li>根据用户请求头，然后用parser_classes的请求头进行比较</li>
<li>解析</li>
<li>request.data获取数据 使用方法</li>
</ol>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 局部</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ParserView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> JSONParser, FormParser</span><br><span class="line">    parser_classes = [JSONParser, FormParser, ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(request.data)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;Parser&#x27;</span>) </span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#全局</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PARSER_CLASSES&#x27;</span>: [<span class="string">&#x27;rest_framework.parsers.JSONParser&#x27;</span>, <span class="string">&#x27;rest_framework.parsers.FormParser&#x27;</span>, ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><h3 id="serializer-Serializer"><a href="#serializer-Serializer" class="headerlink" title="serializer.Serializer"></a>serializer.Serializer</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfoSerializer</span>(serializers.Serializer):</span><br><span class="line">    username = serializers.CharField()</span><br><span class="line">    password = serializers.CharField()</span><br><span class="line">    user_type = serializers.IntegerField()</span><br><span class="line">    <span class="comment"># source取需要的字段</span></span><br><span class="line">    <span class="built_in">type</span> = serializers.CharField(source=<span class="string">&#x27;get_user_type_display&#x27;</span>)</span><br><span class="line">    gp = serializers.CharField(source=<span class="string">&#x27;group.title&#x27;</span>)</span><br><span class="line">    <span class="comment"># 自定义取出字段</span></span><br><span class="line">    rls = serializers.SerializerMethodField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_rls</span>(<span class="params">self, row</span>):</span><br><span class="line">        row_obj_list = row.roles.<span class="built_in">all</span>()</span><br><span class="line">        ret = []</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> row_obj_list:</span><br><span class="line">            ret.append(&#123;<span class="string">&#x27;id&#x27;</span>: item.<span class="built_in">id</span>, <span class="string">&#x27;title&#x27;</span>: item.title&#125;)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfoView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        user = UserInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">        <span class="comment"># many=True可以显示多个，默认为False</span></span><br><span class="line">        ser = UserInfoSerializer(instance=user, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># ensure_ascii=False可以正常显示中文</span></span><br><span class="line">        ret = json.dumps(ser.data, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(ret)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="serializers-ModelSerializer"><a href="#serializers-ModelSerializer" class="headerlink" title="serializers.ModelSerializer"></a>serializers.ModelSerializer</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfoModelSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = UserInfo</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line">        depth = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfoView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        user = UserInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">        <span class="comment"># many=True可以显示多个，默认为False</span></span><br><span class="line">        ser = UserInfoModelSerializer(instance=user, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># ensure_ascii=False可以正常显示中文</span></span><br><span class="line">        ret = json.dumps(ser.data, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(ret)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="反向生成url-1"><a href="#反向生成url-1" class="headerlink" title="反向生成url"></a>反向生成url</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfoModelSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="comment"># 获取到该路由的name(反向生成url)</span></span><br><span class="line">    <span class="comment"># 通过lookup_field = &#x27;group_id’获取数据库中该用户组的id</span></span><br><span class="line">    <span class="comment"># 通过lookup_url_kwarg = &#x27;pk’获取路由中该用户组取值的key获取id</span></span><br><span class="line">    <span class="comment"># 在ModelSerializer实例化的时候通过context参数传递reuqest</span></span><br><span class="line"></span><br><span class="line">    group = serializers.HyperlinkedIdentityField(view_name=<span class="string">&#x27;gp&#x27;</span>, lookup_field=<span class="string">&#x27;group_id&#x27;</span>, lookup_url_kwarg=<span class="string">&#x27;pk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = UserInfo</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line">        depth = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfoView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        user = UserInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">        <span class="comment"># many=True可以显示多个，默认为False</span></span><br><span class="line">        <span class="comment"># 使用HyperlinkedIdentityField之后，需要加上context=&#123;&#x27;request&#x27;: request&#125;</span></span><br><span class="line">        ser = UserInfoModelSerializer(instance=user, many=<span class="literal">True</span>, context=&#123;<span class="string">&#x27;request&#x27;</span>: request&#125;)</span><br><span class="line">        <span class="comment"># ensure_ascii=False可以正常显示中文</span></span><br><span class="line">        ret = json.dumps(ser.data, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(ret)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;user/&#x27;</span>, UserInfoView.as_view()),</span><br><span class="line">    re_path(<span class="string">r&#x27;group/(?P&lt;pk&gt;\d+)&#x27;</span>, GroupView.as_view(), name=<span class="string">&#x27;gp&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="自定义验证器"><a href="#自定义验证器" class="headerlink" title="自定义验证器"></a>自定义验证器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyValidator</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, base</span>):</span><br><span class="line">        self.base = <span class="built_in">str</span>(base)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> value.endswith(self.base):</span><br><span class="line">            msg = <span class="string">&#x27;字段必须以%s结尾&#x27;</span> % self.base</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(msg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_context</span>(<span class="params">self, serializer_field</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserGroupSerializer</span>(serializers.Serializer):</span><br><span class="line">    title = serializers.CharField(error_messages=&#123;<span class="string">&#x27;required&#x27;</span>: <span class="string">&#x27;标题不能缺失&#x27;</span>, <span class="string">&#x27;blank&#x27;</span>: <span class="string">&#x27;标题内容不能为空&#x27;</span>&#125;,</span><br><span class="line">                                  validators=[MyValidator(<span class="string">&#x27;组&#x27;</span>), ])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserGroupView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        ser = UserGroupSerializer(data=request.data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ser.is_valid():</span><br><span class="line">            <span class="built_in">print</span>(ser.validated_data[<span class="string">&#x27;title&#x27;</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(ser.errors)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;POST&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="钩子方法验证"><a href="#钩子方法验证" class="headerlink" title="钩子方法验证"></a>钩子方法验证</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserGroupSerializer</span>(serializers.Serializer):</span><br><span class="line">    title = serializers.CharField(required=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 钩子方法进行验证</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_title</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> value.endswith(<span class="string">&#x27;s&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> serializers.ValidationError(<span class="string">&#x27;必须以s结尾&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserGroupView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        ser = UserGroupSerializer(data=request.data)</span><br><span class="line">        ret = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> ser.is_valid():</span><br><span class="line">            <span class="built_in">print</span>(ser.validated_data[<span class="string">&#x27;title&#x27;</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(ser.errors)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;POST&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="分页-PageNumberPagination-LimitOffsetPagination"><a href="#分页-PageNumberPagination-LimitOffsetPagination" class="headerlink" title="分页(PageNumberPagination,LimitOffsetPagination)"></a>分页(PageNumberPagination,LimitOffsetPagination)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PageSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Role</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPagination</span>(<span class="title class_ inherited__">PageNumberPagination</span>):</span><br><span class="line">    page_size = <span class="number">2</span>  <span class="comment"># 每个页面默认显示个数</span></span><br><span class="line">    page_size_query_param = <span class="string">&#x27;size&#x27;</span>  <span class="comment"># 调节每个页面的显示个数</span></span><br><span class="line">    max_page_size = <span class="number">4</span></span><br><span class="line">    page_query_param = <span class="string">&#x27;page&#x27;</span>  <span class="comment"># 调节跳转页码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PageView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># http://127.0.0.1:8000/page/?size=4&amp;page=2</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 获取数据</span></span><br><span class="line">        roles = Role.objects.<span class="built_in">all</span>()</span><br><span class="line">        <span class="comment"># 分页操作</span></span><br><span class="line">        pg = MyPagination()</span><br><span class="line">        page_roles = pg.paginate_queryset(queryset=roles, request=request, view=self)</span><br><span class="line">        <span class="comment"># 序列化数据</span></span><br><span class="line">        ser = PageSerializer(instance=page_roles, many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br></pre></td></tr></table></figure>

<h3 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&quot;PAGE_SIZE&quot;</span>: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PageView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># http://127.0.0.1:8000/page/?size=4&amp;page=2</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 获取数据</span></span><br><span class="line">        roles = Role.objects.<span class="built_in">all</span>()</span><br><span class="line">        <span class="comment"># 分页操作</span></span><br><span class="line">        pg = PageNumberPagination()</span><br><span class="line">        page_roles = pg.paginate_queryset(queryset=roles, request=request, view=self)</span><br><span class="line">        <span class="comment"># 序列化数据</span></span><br><span class="line">        ser = PageSerializer(instance=page_roles, many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br></pre></td></tr></table></figure>

<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><h3 id="GenericAPIView"><a href="#GenericAPIView" class="headerlink" title="GenericAPIView"></a>GenericAPIView</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># setting.py</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&quot;PAGE_SIZE&quot;</span>: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># url.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;v1/&#x27;</span>, View1View.as_view()),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> GenericAPIView</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PageSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Role</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">View1View</span>(<span class="title class_ inherited__">GenericAPIView</span>):</span><br><span class="line">    <span class="comment"># queryset：数据库中获取值</span></span><br><span class="line">    <span class="comment"># serializer_class：序列化的类方法</span></span><br><span class="line">    <span class="comment"># pagination_class：分页中的类方法</span></span><br><span class="line"></span><br><span class="line">    queryset = Role.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = PageSerializer</span><br><span class="line">    pagination_class = PageNumberPagination</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 获取数据</span></span><br><span class="line">        roles = self.get_queryset()</span><br><span class="line">        <span class="comment"># 分页操作</span></span><br><span class="line">        page_roles = self.paginate_queryset(roles)</span><br><span class="line">        <span class="comment"># 序列化数据</span></span><br><span class="line">        ser = self.get_serializer(instance=page_roles, many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="GenericViewSet"><a href="#GenericViewSet" class="headerlink" title="GenericViewSet"></a>GenericViewSet</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># url.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;v1/&#x27;</span>, View1View.as_view(&#123;<span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;list&#x27;</span>&#125;)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> GenericViewSet</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">View1View</span>(<span class="title class_ inherited__">GenericViewSet</span>):</span><br><span class="line">    <span class="comment"># queryset：数据库中获取值</span></span><br><span class="line">    <span class="comment"># serializer_class：序列化的类方法</span></span><br><span class="line">    <span class="comment"># pagination_class：分页中的类方法</span></span><br><span class="line"></span><br><span class="line">    queryset = Role.objects.<span class="built_in">all</span>().order_by(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    serializer_class = PageSerializer</span><br><span class="line">    pagination_class = PageNumberPagination</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">list</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 获取数据</span></span><br><span class="line">        roles = self.get_queryset()</span><br><span class="line">        <span class="comment"># 分页操作</span></span><br><span class="line">        page_roles = self.paginate_queryset(roles)</span><br><span class="line">        <span class="comment"># 序列化数据</span></span><br><span class="line">        ser = self.get_serializer(instance=page_roles, many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="ModelViewSet"><a href="#ModelViewSet" class="headerlink" title="ModelViewSet"></a>ModelViewSet</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;v1/(?P&lt;pk&gt;\d+)&#x27;</span>, View1View.as_view(&#123;<span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;retrieve&#x27;</span>, <span class="string">&#x27;post&#x27;</span>: <span class="string">&#x27;create&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>: <span class="string">&#x27;destroy&#x27;</span>, <span class="string">&#x27;put&#x27;</span>: <span class="string">&#x27;update&#x27;</span>&#125;)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">View1View</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    <span class="comment"># queryset：数据库中获取值</span></span><br><span class="line">    <span class="comment"># serializer_class：序列化的类方法</span></span><br><span class="line">    <span class="comment"># pagination_class：分页中的类方法</span></span><br><span class="line"></span><br><span class="line">    queryset = Role.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = PageSerializer</span><br><span class="line">    pagination_class = PageNumberPagination</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path, include</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers</span><br><span class="line"><span class="keyword">from</span> api.views <span class="keyword">import</span> View1View</span><br><span class="line"></span><br><span class="line">router = routers.DefaultRouter()</span><br><span class="line">router.register(<span class="string">r&#x27;view&#x27;</span>, View1View)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># http://127.0.0.1:8000/api/view/</span></span><br><span class="line">    <span class="comment"># http://127.0.0.1:8000/api/view/1/</span></span><br><span class="line">    re_path(<span class="string">r&#x27;api/&#x27;</span>, include(router.urls)),</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">View1View</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    <span class="comment"># queryset：数据库中获取值</span></span><br><span class="line">    <span class="comment"># serializer_class：序列化的类方法</span></span><br><span class="line">    <span class="comment"># pagination_class：分页中的类方法</span></span><br><span class="line"></span><br><span class="line">    queryset = Role.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = PageSerializer</span><br><span class="line">    pagination_class = PageNumberPagination</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="渲染器"><a href="#渲染器" class="headerlink" title="渲染器"></a>渲染器</h2><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&quot;PAGE_SIZE&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;DEFAULT_RENDERER_CLASSES&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;rest_framework.renderers.JSONRenderer&quot;</span>,</span><br><span class="line">        <span class="string">&quot;rest_framework.renderers.BrowsableAPIRenderer&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="单独配置"><a href="#单独配置" class="headerlink" title="单独配置"></a>单独配置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">View1View</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    <span class="comment"># queryset：数据库中获取值</span></span><br><span class="line">    <span class="comment"># serializer_class：序列化的类方法</span></span><br><span class="line">    <span class="comment"># pagination_class：分页中的类方法</span></span><br><span class="line">    <span class="comment"># http://127.0.0.1:8000/api/view/?format=admin</span></span><br><span class="line">    renderer_classes = [JSONRenderer, BrowsableAPIRenderer, AdminRenderer]</span><br><span class="line"></span><br><span class="line">    queryset = Role.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = PageSerializer</span><br><span class="line">    pagination_class = PageNumberPagination</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>django</category>
        <category>rest_framework</category>
      </categories>
      <tags>
        <tag>rest_framework</tag>
      </tags>
  </entry>
  <entry>
    <title>scrapy</title>
    <url>/2022/05/24/scrapy/</url>
    <content><![CDATA[<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><strong>scrapy startproject queto</strong></p>
<h2 id="创建爬虫"><a href="#创建爬虫" class="headerlink" title="创建爬虫"></a>创建爬虫</h2><p><strong>在spider目录下面建立queto_spider.py文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class QuetoSpider(scrapy.Spider):</span><br><span class="line"></span><br><span class="line">    name = &#x27;queto&#x27;</span><br><span class="line"></span><br><span class="line">    def start_requests(self):</span><br><span class="line">        urls = [</span><br><span class="line">            &#x27;https://quotes.toscrape.com/page/1/&#x27;,</span><br><span class="line">            &#x27;https://quotes.toscrape.com/page/2/&#x27;</span><br><span class="line">        ]</span><br><span class="line">        for url in urls:</span><br><span class="line">            yield scrapy.Request(url, callback=self.parse)</span><br><span class="line"></span><br><span class="line">    def parse(self, response, **kwargs):</span><br><span class="line">        page = response.url.split(&#x27;/&#x27;)[-2]</span><br><span class="line">        filename = &#x27;%s.html&#x27; % page</span><br><span class="line"></span><br><span class="line">        with open(filename, &#x27;wb&#x27;) as f:</span><br><span class="line">            f.write(response.body)</span><br></pre></td></tr></table></figure>

<h2 id="跳转到下一页-此处下一页的链接为-x2F-page-x2F-2-x2F"><a href="#跳转到下一页-此处下一页的链接为-x2F-page-x2F-2-x2F" class="headerlink" title="跳转到下一页(此处下一页的链接为 &#x2F;page&#x2F;2&#x2F;)"></a>跳转到下一页(此处下一页的链接为 &#x2F;page&#x2F;2&#x2F;)</h2><h3 id="构造新的链接"><a href="#构造新的链接" class="headerlink" title="构造新的链接"></a>构造新的链接</h3><ul>
<li><strong>response.urljoin</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if next_page is not None:</span><br><span class="line">    next_page = response.urljoin(next_page)</span><br><span class="line">    yield scrapy.Request(next_page, callback=self.parse)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>response.follow</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">next_url = response.xpath(&#x27;//li[@class=&quot;next&quot;]/a/@href&#x27;).get()</span><br><span class="line">if next_url is not None:</span><br><span class="line">    yield response.follow(next_url, callback=self.parse)</span><br></pre></td></tr></table></figure>

<p><strong>完整项目代码</strong></p>
<p><strong>yield中提取数据保存</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class QuetoSpider(scrapy.Spider):</span><br><span class="line"></span><br><span class="line">    name = &#x27;queto&#x27;</span><br><span class="line"></span><br><span class="line">    start_urls = [</span><br><span class="line">        &#x27;https://quotes.toscrape.com/page/1/&#x27;,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    def parse(self, response, **kwargs):</span><br><span class="line">        for item in response.xpath(&#x27;//div[@class=&quot;quote&quot;]&#x27;):</span><br><span class="line">            yield &#123;</span><br><span class="line">                &#x27;text&#x27;: item.xpath(&#x27;//span/text()&#x27;).get(),</span><br><span class="line">                &#x27;author&#x27;: item.xpath(&#x27;//span/small/text()&#x27;).get(),</span><br><span class="line">                &#x27;tag&#x27;: item.xpath(&#x27;//div/a[@class=&quot;tag&quot;]/text()&#x27;).get(),</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        next_url = response.xpath(&#x27;//li[@class=&quot;next&quot;]/a/@href&#x27;).get()</span><br><span class="line">        if next_url is not None:</span><br><span class="line">            yield response.follow(next_url, callback=self.parse)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="执行爬虫命令"><a href="#执行爬虫命令" class="headerlink" title="执行爬虫命令"></a>执行爬虫命令</h2><p><strong>scrapy crawl queto</strong>， 此处crawl后面的名字与上面的name相互对应</p>
<p><strong>scrapy crawl queto -o queto.jl</strong>， 保存为jl格式</p>
<p><strong>scrapy crawl queto -o queto.json</strong>, 保存为json格式</p>
<p><a href="https://www.shangyang.me/2017/06/29/scrapy-learning-1-tutorial/">参考链接</a></p>
<p><a href="https://docs.scrapy.org/en/latest/intro/tutorial.html#creating-a-project">参考链接</a></p>
]]></content>
      <tags>
        <tag>scrapy</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>sql自关联</title>
    <url>/2022/05/29/sql%E8%87%AA%E5%85%B3%E8%81%94/</url>
    <content><![CDATA[<p>所遇到的问题，多级评论如何存储。</p>
<p><a href="https://blog.csdn.net/Fire_Sky_Ho/article/details/88080301">参考链接</a></p>
<p><img src="/2022/05/29/sql%E8%87%AA%E5%85%B3%E8%81%94//1653789483757.png"></p>
<p>解决方案，采用自关联解决。即parent保存一级评论的id属性。</p>
<p><img src="/2022/05/29/sql%E8%87%AA%E5%85%B3%E8%81%94//1653790922453.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;呼啦圈表设计</span></span><br><span class="line"><span class="string">表：</span></span><br><span class="line"><span class="string">用户：用户名、密码</span></span><br><span class="line"><span class="string">评论: 时间、父评论（自关联）、归属文章：评论 1：n、评论者（用户）：评论 1：n</span></span><br><span class="line"><span class="string">文章: 作者（用户)：文章 1：n 、时间、分类、标题、内容、简介、评论数、浏览数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfo</span>(models.Model):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;用户表&#x27;&#x27;&#x27;</span></span><br><span class="line">    username = models.CharField(verbose_name=<span class="string">&#x27;用户名&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    password = models.CharField(verbose_name=<span class="string">&quot;密码&quot;</span>, max_length=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(models.Model):</span><br><span class="line">    <span class="string">&#x27;文章表&#x27;</span></span><br><span class="line">    category_choices = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&#x27;咨询&#x27;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&#x27;公司动态&#x27;</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">&#x27;分享&#x27;</span>),</span><br><span class="line">        (<span class="number">4</span>, <span class="string">&#x27;答疑&#x27;</span>),</span><br><span class="line">        (<span class="number">5</span>, <span class="string">&#x27;其他&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    category = models.CharField(verbose_name=<span class="string">&#x27;分类&#x27;</span>, choices=category_choices)</span><br><span class="line">    title = models.CharField(verbose_name=<span class="string">&#x27;标题&#x27;</span>, max_length=<span class="number">255</span>)</span><br><span class="line">    image = models.CharField(verbose_name=<span class="string">&#x27;图片路径&#x27;</span>, max_length=<span class="number">128</span>)</span><br><span class="line">    summary = models.CharField(verbose_name=<span class="string">&#x27;简介&#x27;</span>, max_length=<span class="number">255</span>)</span><br><span class="line">    comment_count = models.IntegerField(verbose_name=<span class="string">&#x27;评论数&#x27;</span>, default=<span class="number">0</span>)</span><br><span class="line">    read_count = models.IntegerField(verbose_name=<span class="string">&#x27;阅读数&#x27;</span>, default=<span class="number">0</span>)</span><br><span class="line">    data = models.DateTimeField(verbose_name=<span class="string">&#x27;创建时间&#x27;</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    author = models.ForeignKey(</span><br><span class="line">        to=<span class="string">&#x27;UserInfo&#x27;</span>, verbose_name=<span class="string">&#x27;作者&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Comment</span>(models.Model):</span><br><span class="line">    <span class="string">&#x27;评论表&#x27;</span></span><br><span class="line">    content = models.TextField(verbose_name=<span class="string">&#x27;评论&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    article = models.ForeignKey(</span><br><span class="line">        verbose_name=<span class="string">&#x27;文章&#x27;</span>, to=<span class="string">&#x27;Article&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    user = models.ForeignKey(</span><br><span class="line">        verbose_name=<span class="string">&#x27;评论者&#x27;</span>, to=<span class="string">&#x27;UserInfo&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    parent = models.ForeignKey(</span><br><span class="line">        verbose_name=<span class="string">&#x27;父评论&#x27;</span>, to=<span class="string">&#x27;self&#x27;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, default=<span class="literal">None</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>supervisor</title>
    <url>/2023/03/02/supervisor/</url>
    <content><![CDATA[<h1 id="supervisor-使用方法"><a href="#supervisor-使用方法" class="headerlink" title="supervisor 使用方法"></a>supervisor 使用方法</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li><p>pip 安装</p>
<p><code>pip install supervisor</code></p>
</li>
<li><p>安装好之后，创建目录</p>
<p><code>mkdir /etc/supervisor</code></p>
<p><code>echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</code></p>
</li>
<li><p>修改默认的配置文件 <code>supervisord.conf</code><br><code>[include] files = /etc/supervisor/conf.d/*.conf</code></p>
</li>
</ul>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>指定默认配置文件启动</p>
<p><code>supervisord -c /etc/supervisor/supervisord.conf</code></p>
<p>或者直接启动</p>
<p><code>supervisord</code></p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[program:spider]</span><br><span class="line">directory=/home/T1/CqSpider</span><br><span class="line"><span class="built_in">command</span>=python /home/T1/CqSpider/all.py</span><br><span class="line">priority=999                ; the relative start priority (default 999)</span><br><span class="line">autostart=<span class="literal">true</span>              ; start at supervisord start (default: <span class="literal">true</span>)</span><br><span class="line">autorestart=<span class="literal">true</span>            ; retstart at unexpected quit (default: <span class="literal">true</span>)</span><br><span class="line">startsecs=10                ; number of secs prog must stay running (def. 10)</span><br><span class="line">startretries=3              ; max <span class="comment"># of serial start failures (default 3)</span></span><br><span class="line">exitcodes=0,2               ; <span class="string">&#x27;expected&#x27;</span> <span class="built_in">exit</span> codes <span class="keyword">for</span> process (default 0,2)</span><br><span class="line">stopsignal=QUIT             ; signal used to <span class="built_in">kill</span> process (default TERM)</span><br><span class="line">stopwaitsecs=10             ; max num secs to <span class="built_in">wait</span> before SIGKILL (default 10)</span><br><span class="line">user=root                 ; setuid to this UNIX account to run the program</span><br><span class="line">log_stdout=<span class="literal">true</span></span><br><span class="line">log_stderr=<span class="literal">true</span>             ; <span class="keyword">if</span> <span class="literal">true</span>, <span class="built_in">log</span> program stderr (def <span class="literal">false</span>)</span><br><span class="line">logfile=/home/T1/CqSpider/all_py.log</span><br><span class="line">logfile_maxbytes=1MB        ; max <span class="comment"># logfile bytes b4 rotation (default 50MB)</span></span><br><span class="line">logfile_backups=10          ; <span class="comment"># of logfile backups (default 10)</span></span><br><span class="line">stdout_logfile_maxbytes=50MB  ; stdout 日志文件大小，默认 50MB</span><br><span class="line">stdout_logfile_backups=20     ; stdout 日志文件备份数</span><br><span class="line">stdout_logfile=/home/T1/CqSpider/.stdout.log</span><br></pre></td></tr></table></figure>

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><code>supervisorctl reload # 重新启动supervisord</code></p>
<p><code>supervisorctl shutdown # 关闭supervisord</code></p>
<p><code>supervisorctl reread # 重新读取配置</code></p>
<p><code>supervisorctl update # 更新配置</code></p>
<p><code>supervisorctl restart spider # 重启 spider</code></p>
<p><code>supervisorctl status # 查看运行情况</code></p>
<p><code>supervisordctl start 进程名 # 启动进程</code></p>
<p><code>supervisordctl stop 进程名 # 关闭进程</code></p>
<p><code>supervisordctl restart 进程名 # 重启进程</code></p>
<p><code>supervisordctl clear 进程名 # 清空进程日志</code></p>
]]></content>
      <tags>
        <tag>supervisor</tag>
      </tags>
  </entry>
  <entry>
    <title>swap分区</title>
    <url>/2022/10/29/swap%E5%88%86%E5%8C%BA/</url>
    <content><![CDATA[<h2 id="Ubuntu添加Swap分区"><a href="#Ubuntu添加Swap分区" class="headerlink" title="Ubuntu添加Swap分区"></a>Ubuntu添加Swap分区</h2><h3 id="查看系统是否有Swap分区"><a href="#查看系统是否有Swap分区" class="headerlink" title="查看系统是否有Swap分区"></a>查看系统是否有Swap分区</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo swapon --show</span><br></pre></td></tr></table></figure>

<p>如果没有任何输出，表示没有swap分区，也可以通过free命令验证一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">free -h</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Output</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:            486         316          81           5          88         132</span><br><span class="line">Swap:             0           0           0</span><br></pre></td></tr></table></figure>

<p>可以看到Swap的大小是零，也就是没有swap分区。</p>
<h3 id="创建Swap分区文件"><a href="#创建Swap分区文件" class="headerlink" title="创建Swap分区文件"></a>创建Swap分区文件</h3><p>创建一个1G大小的文件作为交换分区的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo fallocate -l 1G /swapfile</span><br></pre></td></tr></table></figure>

<p>设置这个文件权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chmod 600 /swapfile</span><br></pre></td></tr></table></figure>

<p>格式化为交换分区文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkswap /swapfile</span><br></pre></td></tr></table></figure>

<p>启用交换分区文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo swapon /swapfile</span><br></pre></td></tr></table></figure>

<p>验证一下swap分区文件是否创建成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo swapon --show</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Output</span><br><span class="line">NAME      TYPE  SIZE USED PRIO</span><br><span class="line">/swapfile file 1024M   0B   -1</span><br></pre></td></tr></table></figure>

<h3 id="设置开机时自启用Swap分区"><a href="#设置开机时自启用Swap分区" class="headerlink" title="设置开机时自启用Swap分区"></a>设置开机时自启用Swap分区</h3><p>备份 <code>/etc/fstab</code>文件，防止出错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/fstab /etc/fstab.bak</span><br></pre></td></tr></table></figure>

<p>输入下面的命令在 <code>/etc/fstab</code>文件添加一行swap文件的信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;/swapfile none swap sw 0 0&#x27; | sudo tee -a /etc/fstab</span><br></pre></td></tr></table></figure>

<h3 id="优化Swap设置"><a href="#优化Swap设置" class="headerlink" title="优化Swap设置"></a>优化Swap设置</h3><p>调整Swappiness值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo sysctl vm.swappiness=10</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Output</span><br><span class="line">vm.swappiness = 10</span><br></pre></td></tr></table></figure>

<p>调整Cache Pressure值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo sysctl vm.vfs_cache_pressure=50</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Output</span><br><span class="line">vm.vfs_cache_pressure = 50</span><br></pre></td></tr></table></figure>

<p>设置开机时自动调整这两项设置值<br>在 <code>/etc/sysctl.conf</code>文件最后添加下面两行内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vm.swappiness=10</span><br><span class="line">vm.vfs_cache_pressure=50</span><br></pre></td></tr></table></figure>

<p>OK，搞定，测试一下看pip是否能安装这个包了，哈哈，不再是Killed，变成了Successfully installed，没有问题，成功安装。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Output</span><br><span class="line">Installing collected packages: pypinyin</span><br><span class="line">Successfully installed pypinyin-0.33.0</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>swap分区</tag>
      </tags>
  </entry>
  <entry>
    <title>操作符</title>
    <url>/2022/05/26/%E4%BD%8D%E8%BF%90%E7%AE%97%E5%BC%82%E6%88%96/</url>
    <content><![CDATA[<h1 id="异或（"><a href="#异或（" class="headerlink" title="异或（^)"></a>异或（^)</h1><h2 id="相同为0，不同为1"><a href="#相同为0，不同为1" class="headerlink" title="相同为0，不同为1"></a>相同为0，不同为1</h2><p>0^0&#x3D;0</p>
<p>0^1&#x3D;1</p>
<p>1^0&#x3D;1</p>
<p>1^1&#x3D;0</p>
<h2 id="运算法则"><a href="#运算法则" class="headerlink" title="运算法则"></a>运算法则</h2><p>X^X &#x3D; 0</p>
<p>X^0&#x3D;X</p>
<p>X^Y&#x3D;Y^X</p>
<p>X^(Y^Z)&#x3D;(X^Y)^Z</p>
<h2 id="实际运用"><a href="#实际运用" class="headerlink" title="实际运用"></a>实际运用</h2><h2 id="数据交换（X-Y-x3D-Y-X"><a href="#数据交换（X-Y-x3D-Y-X" class="headerlink" title="数据交换（X,Y&#x3D;Y,X)"></a>数据交换（X,Y&#x3D;Y,X)</h2><p>X, Y &#x3D; a, b</p>
<p>X &#x3D; X^Y    ———-(a^b, a)</p>
<p>Y &#x3D; X^Y    ———-(a^b, a^b^b)—————(a^b, a)</p>
<p>X &#x3D; X^Y    ———-(a^b^a, a)     —————-(b, a)</p>
<h1 id="与"><a href="#与" class="headerlink" title="与"></a>与</h1><p><img src="/2022/05/26/%E4%BD%8D%E8%BF%90%E7%AE%97%E5%BC%82%E6%88%96//1647178337743.png"></p>
]]></content>
      <tags>
        <tag>操作符</tag>
      </tags>
  </entry>
  <entry>
    <title>1+9r刷机笔记</title>
    <url>/2022/07/06/%E5%88%B7%E6%9C%BA/</url>
    <content><![CDATA[<h2 id="准备工作，color-os线刷至氧os"><a href="#准备工作，color-os线刷至氧os" class="headerlink" title="准备工作，color os线刷至氧os"></a>准备工作，color os线刷至氧os</h2><p>教程<br><a href="https://www.hkepc.com/forum/viewthread.php?fid=168&amp;tid=2620340&amp;page=1">https://www.hkepc.com/forum/viewthread.php?fid=168&amp;tid=2620340&amp;page=1</a></p>
<h2 id="1、解锁-bootloader教程"><a href="#1、解锁-bootloader教程" class="headerlink" title="1、解锁 bootloader教程"></a>1、解锁 bootloader教程</h2><h3 id="1-1-驱动安装（Google-USB、高通驱动）"><a href="#1-1-驱动安装（Google-USB、高通驱动）" class="headerlink" title="1.1 驱动安装（Google USB、高通驱动）"></a>1.1 驱动安装（Google USB、高通驱动）</h3><p><a href="https://www.bilibili.com/video/BV1n64y1u7LE?p=1&amp;share_medium=android_i&amp;share_plat=android&amp;share_source=COPY&amp;share_tag=s_i&amp;timestamp=1644025451&amp;unique_k=Tc4bIVY">https://www.bilibili.com/video/BV1n64y1u7LE?p=1&amp;share_medium=android_i&amp;share_plat=android&amp;share_source=COPY&amp;share_tag=s_i&amp;timestamp=1644025451&amp;unique_k=Tc4bIVY</a></p>
<h3 id="1-2-adb命令解锁bootloader"><a href="#1-2-adb命令解锁bootloader" class="headerlink" title="1.2 adb命令解锁bootloader"></a>1.2 adb命令解锁bootloader</h3><p>fastboot devices</p>
<p>fastboot oem unlock</p>
<h2 id="2、刷入第三方-twrp"><a href="#2、刷入第三方-twrp" class="headerlink" title="2、刷入第三方 twrp"></a>2、刷入第三方 twrp</h2><p><a href="https://www.bilibili.com/video/av841014036?from=search&seid=13682037280247844152">参考链接</a></p>
<p>首先下载recover.img<br>然后进入bootloader模式，命令行输入,即可刷入，然后进入引导模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastboot flash recovery recovery.img</span><br><span class="line"></span><br><span class="line">fastboot boot recovery.img</span><br></pre></td></tr></table></figure>

<h2 id="3、清除系统数据"><a href="#3、清除系统数据" class="headerlink" title="3、清除系统数据"></a>3、清除系统数据</h2><p><a href="https://unofficialtwrp.com/twrp-3-5-1-root-oneplus-9r/#How_to_Install_twrp_Recovery_on_OnePlus_9R">参考链接</a></p>
<h3 id="若有问题，刷入以下命令"><a href="#若有问题，刷入以下命令" class="headerlink" title="若有问题，刷入以下命令"></a>若有问题，刷入以下命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastboot flash recovery_a twrp.img</span><br><span class="line"></span><br><span class="line">fastboot flash recovery_b twrp.img</span><br></pre></td></tr></table></figure>

<p>清除a&#x2F;b分区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastboot flash vbmeta vbmeta.img</span><br><span class="line">fastboot format userdata</span><br></pre></td></tr></table></figure>

<h2 id="4、清空文件，twrp情况下，进入recovery模式，进行zip文件传输，命令如下，-zip为具体的zip名称"><a href="#4、清空文件，twrp情况下，进入recovery模式，进行zip文件传输，命令如下，-zip为具体的zip名称" class="headerlink" title="4、清空文件，twrp情况下，进入recovery模式，进行zip文件传输，命令如下，*zip为具体的zip名称"></a>4、清空文件，twrp情况下，进入recovery模式，进行zip文件传输，命令如下，*zip为具体的zip名称</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb devices</span><br><span class="line"></span><br><span class="line">adb push *.zip /sdcard</span><br></pre></td></tr></table></figure>

<h2 id="5、install-选择zip文件安装"><a href="#5、install-选择zip文件安装" class="headerlink" title="5、install 选择zip文件安装"></a>5、install 选择zip文件安装</h2><h2 id="other-way-可以通过adb命令的方式来刷入文件"><a href="#other-way-可以通过adb命令的方式来刷入文件" class="headerlink" title="other way 可以通过adb命令的方式来刷入文件"></a>other way 可以通过adb命令的方式来刷入文件</h2><p><a href="https://www.oneplusbbs.com/thread-4796616-1.html">https://www.oneplusbbs.com/thread-4796616-1.html</a></p>
<h1 id="刷机方式2"><a href="#刷机方式2" class="headerlink" title="刷机方式2"></a>刷机方式2</h1><h2 id="一键刷机步骤，只需要rom包即可"><a href="#一键刷机步骤，只需要rom包即可" class="headerlink" title="一键刷机步骤，只需要rom包即可"></a>一键刷机步骤，只需要rom包即可</h2><ul>
<li>前提，先解锁，安装好高通驱动和google usb驱动，驱动直接安装即可</li>
<li><a href="https://www.cnblogs.com/melons99/p/16307830.html">参考链接</a></li>
<li>首先准备ROM包，提取里面的的文件</li>
<li>使用一键刷机工具刷机即可</li>
</ul>
<h2 id="救砖方式，线刷至氧os即可，关机后，上下键按住，进入9008模式。"><a href="#救砖方式，线刷至氧os即可，关机后，上下键按住，进入9008模式。" class="headerlink" title="救砖方式，线刷至氧os即可，关机后，上下键按住，进入9008模式。"></a>救砖方式，线刷至氧os即可，关机后，上下键按住，进入9008模式。</h2><h1 id="root权限获取"><a href="#root权限获取" class="headerlink" title="root权限获取"></a>root权限获取</h1><h2 id="首先将安装包提取boot-img"><a href="#首先将安装包提取boot-img" class="headerlink" title="首先将安装包提取boot.img"></a>首先将安装包提取boot.img</h2><p><a href="https://www.daxiaamu.com/5804/">参考链接</a><br><a href="https://yun.daxiaamu.com/files/tool/payload.bin%E8%A7%A3%E5%8C%85%E5%B7%A5%E5%85%B7/payload%20dumper_go_%E5%A4%A7%E4%BE%A0%E9%98%BF%E6%9C%A8%E9%87%8D%E5%88%B6/%E6%8A%8AROM%E6%8B%96%E5%88%B0%E6%88%91%E5%A4%B4%E4%B8%8A.exe?preview">参考链接</a></p>
<h2 id="利用magisk将boot-img修改为patched-boot-img"><a href="#利用magisk将boot-img修改为patched-boot-img" class="headerlink" title="利用magisk将boot.img修改为patched_boot.img"></a>利用magisk将boot.img修改为patched_boot.img</h2><h2 id="刷入修改后的patched-boot-img"><a href="#刷入修改后的patched-boot-img" class="headerlink" title="刷入修改后的patched_boot.img"></a>刷入修改后的patched_boot.img</h2><p>fastboot flash boot magisk_patched.img</p>
<h2 id="救砖教程参考链接"><a href="#救砖教程参考链接" class="headerlink" title="救砖教程参考链接"></a>救砖教程参考链接</h2><p><a href="https://www.oneplusbbs.com/forum.php?mod=viewthread&amp;tid=4988971">https://www.oneplusbbs.com/forum.php?mod=viewthread&amp;tid=4988971</a></p>
<p><a href="https://blog.csdn.net/weixin_39771775/article/details/111112651">https://blog.csdn.net/weixin_39771775/article/details/111112651</a></p>
]]></content>
      <tags>
        <tag>刷机</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程多进程</title>
    <url>/2022/05/26/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ul>
<li>多进程，计算密集型，如大量的数据计算，利用CPU的多核优势，有几个核开几个进程</li>
<li>多线程，IO密集型，如文件读写，网络数据传输等</li>
</ul>
<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="t-start"><a href="#t-start" class="headerlink" title="t.start"></a>t.start</h2><p>当前线程开始执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">t = threading.Thread(target=task, args=_args)</span><br><span class="line">t.start()</span><br></pre></td></tr></table></figure>

<h2 id="t-join"><a href="#t-join" class="headerlink" title="t.join()"></a>t.join()</h2><p>等待当前线程完成，再继续往下进行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">t = threading.Thread(target=task, args=_args)</span><br><span class="line">t.start()</span><br><span class="line">t.join()</span><br></pre></td></tr></table></figure>

<h2 id="daemon"><a href="#daemon" class="headerlink" title="daemon"></a>daemon</h2><ul>
<li>当daemon为False时，父线程在运行完毕后，会等待所有子线程退出才结束程序。</li>
<li>当daemon为True时，父线程在运行完毕后，子线程无论是否正在运行，都会伴随主线程一起退出。</li>
</ul>
<h2 id="自定义线程类"><a href="#自定义线程类" class="headerlink" title="自定义线程类"></a>自定义线程类</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">args</span>):</span><br><span class="line">    name = threading.current_thread().getName()</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    t = threading.Thread(target=task, args=(<span class="number">11</span>,))</span><br><span class="line">    t.setName(<span class="string">&#x27;task-&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure>

<p>将要做的事写入到线程里面去,定义run方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行线程&#x27;</span>, self._args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    t = MyThread(args=(i, ))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure>

<h2 id="线程安全，利用锁机制"><a href="#线程安全，利用锁机制" class="headerlink" title="线程安全，利用锁机制"></a>线程安全，利用锁机制</h2><ul>
<li>Lock 只能单个加锁、解锁</li>
<li>RLock 支持嵌套加锁、解锁</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#单个</span></span><br><span class="line">lock_object.acquire()</span><br><span class="line">lock_object.release()</span><br><span class="line"><span class="comment">#嵌套</span></span><br><span class="line">lock_object.acquire()</span><br><span class="line">lock_object.acquire()</span><br><span class="line"></span><br><span class="line">lock_object.release()</span><br><span class="line">lock_object.release()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">lock_object = threading.RLock()</span><br><span class="line">data = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>():</span><br><span class="line">    lock_object.acquire()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">        data.append(i)</span><br><span class="line">    lock_object.release()</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(data))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task1</span>():</span><br><span class="line">    <span class="comment"># with lock_object自动加锁，释放锁</span></span><br><span class="line">    <span class="keyword">with</span> lock_object:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">            data.append(i)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">len</span>(data))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    t = threading.Thread(target=task)</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure>

<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个准备作为线程任务的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params"><span class="built_in">max</span></span>):</span><br><span class="line">    my_sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">max</span>):</span><br><span class="line">        <span class="built_in">print</span>(threading.current_thread().name + <span class="string">&#x27;  &#x27;</span> + <span class="built_in">str</span>(i))</span><br><span class="line">        my_sum += i</span><br><span class="line">    <span class="keyword">return</span> my_sum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个包含2条线程的线程池</span></span><br><span class="line"><span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">2</span>) <span class="keyword">as</span> pool:</span><br><span class="line">    <span class="comment"># 向线程池提交一个task, 50会作为action()函数的参数</span></span><br><span class="line">    future1 = pool.submit(action, <span class="number">50</span>)</span><br><span class="line">    <span class="comment"># 向线程池再提交一个task, 100会作为action()函数的参数</span></span><br><span class="line">    future2 = pool.submit(action, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_result</span>(<span class="params">future</span>):</span><br><span class="line">        <span class="built_in">print</span>(future.result())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 为future1添加线程完成的回调函数</span></span><br><span class="line">    future1.add_done_callback(get_result)</span><br><span class="line">    <span class="comment"># 为future2添加线程完成的回调函数</span></span><br><span class="line">    future2.add_done_callback(get_result)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;--------------&#x27;</span>) </span><br></pre></td></tr></table></figure>

<h2 id="单例模式（拓展"><a href="#单例模式（拓展" class="headerlink" title="单例模式（拓展)"></a>单例模式（拓展)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>:</span><br><span class="line">    instance = <span class="literal">None</span></span><br><span class="line">    lock = threading.RLock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 多线程的情况下，会有问题，可能创建多个对象，需要加锁来控制</span></span><br><span class="line">        <span class="keyword">with</span> cls.lock:</span><br><span class="line">            <span class="keyword">if</span> cls.instance:</span><br><span class="line">                <span class="keyword">return</span> cls.instance</span><br><span class="line">            cls.instance = <span class="built_in">object</span>.__new__(cls, *args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> cls.instance</span><br></pre></td></tr></table></figure>

<h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><p>进程间相互隔离</p>
<p>三大模式</p>
<ul>
<li>fork， 拷贝所有资源，支持文件对象&amp;&amp;锁的传参，[unix]</li>
<li>spawn， run可以传递参数，不支持文件对象&amp;&amp;线程锁，[win, unix]，main代码块开始执行</li>
<li>forkserver，同spawn</li>
</ul>
<h2 id="常用函数作用"><a href="#常用函数作用" class="headerlink" title="常用函数作用"></a>常用函数作用</h2><ul>
<li>join（） 等待工作进程退出。必须打电话close()或 terminate()使用之前join()。</li>
<li>close（） 防止任何更多的任务被提交到池中。 一旦完成所有任务，工作进程将退出。</li>
<li>terminate（）立即停止工作进程而不完成未完成的工作。当池对象被垃圾收集时，terminate()将立即调用。</li>
</ul>
<p>示例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;module name:&#x27;</span>, __name__)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;parent process:&#x27;</span>, os.getppid())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;process id:&#x27;</span>, os.getpid())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">name</span>):</span><br><span class="line">    info()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    info()</span><br><span class="line">    p = Process(target=f, args=(<span class="string">&#x27;bob&#x27;</span>,))</span><br><span class="line">    <span class="comment"># p.daemon = False</span></span><br><span class="line">    <span class="built_in">print</span>(p.daemon)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;name:&#x27;</span>, p.name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;is_alive:&#x27;</span>, p.is_alive())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;exitcode:&#x27;</span>, p.exitcode)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">------------------------------------------------------------</span></span><br><span class="line"><span class="string">module name: __main__</span></span><br><span class="line"><span class="string">parent process: 1188</span></span><br><span class="line"><span class="string">process id: 13060</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">module name: __mp_main__</span></span><br><span class="line"><span class="string">parent process: 13060</span></span><br><span class="line"><span class="string">process id: 13424</span></span><br><span class="line"><span class="string">name: Process-1</span></span><br><span class="line"><span class="string">is_alive: True</span></span><br><span class="line"><span class="string">exitcode: None</span></span><br><span class="line"><span class="string">hello bob</span></span><br><span class="line"><span class="string">------------------------------------------------------------</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h2><p>apply一个一个执行，并没有实现并行操作，阻塞式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">p</span>):</span><br><span class="line">       <span class="built_in">print</span>(p)</span><br><span class="line">       time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pool = Pool(processes=<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">for</span> i  <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        (&#x27;\n&#x27;</span></span><br><span class="line"><span class="string">         &#x27;	（1）遍历500个可迭代对象，往进程池放一个子进程\n&#x27;</span></span><br><span class="line"><span class="string">         &#x27;	（2）执行这个子进程，等子进程执行完毕，再往进程池放一个子进程，再执行。（同时只执行一个子进程）\n&#x27;</span></span><br><span class="line"><span class="string">         &#x27;	 for循环执行完毕，再执行print函数。\n&#x27;</span></span><br><span class="line"><span class="string">         &#x27;	&#x27;)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        pool.apply(test, args=(i,))   <span class="comment">#维持执行的进程总数为10，当一个进程执行完后启动一个新进程.</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br></pre></td></tr></table></figure>

<p>apply_async，实现异步操作，非阻塞式，实现并行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">p</span>):</span><br><span class="line">       <span class="built_in">print</span>(p)</span><br><span class="line">       time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pool = Pool(processes=<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i  <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">         （1）循环遍历，将500个子进程添加到进程池（相对父进程会阻塞）\n&#x27;</span></span><br><span class="line"><span class="string">         （2）每次执行2个子进程，等一个子进程执行完后，立马启动新的子进程。（相对父进程不阻塞）\n&#x27;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        pool.apply_async(test, args=(i,))   <span class="comment">#维持执行的进程总数为10，当一个进程执行完后启动一个新进程.</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br></pre></td></tr></table></figure>

<h2 id="多进程之间的数据共享"><a href="#多进程之间的数据共享" class="headerlink" title="多进程之间的数据共享"></a>多进程之间的数据共享</h2><h3 id="Queue-支持多对多"><a href="#Queue-支持多对多" class="headerlink" title="Queue 支持多对多"></a>Queue 支持多对多</h3><p>put存数据，get取数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"><span class="comment"># 写数据进程执行的代码:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_write</span>(<span class="params">q,urls</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Process(%s) is writing...&#x27;</span> % os.getpid())</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        q.put(url)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Put %s to queue...&#x27;</span> % url)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"><span class="comment"># 读数据进程执行的代码:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_read</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Process(%s) is reading...&#x27;</span> % os.getpid())</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        url = q.get(<span class="literal">True</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Get %s from queue.&#x27;</span> % url)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 父进程创建Queue，并传给各个子进程：</span></span><br><span class="line">    q = Queue()</span><br><span class="line">    _writer1 = Process(target=_write, args=(q,[<span class="string">&#x27;url_1&#x27;</span>, <span class="string">&#x27;url_2&#x27;</span>, <span class="string">&#x27;url_3&#x27;</span>]))</span><br><span class="line">    _writer2 = Process(target=_write, args=(q,[<span class="string">&#x27;url_4&#x27;</span>,<span class="string">&#x27;url_5&#x27;</span>,<span class="string">&#x27;url_6&#x27;</span>]))</span><br><span class="line">    _reader = Process(target=_read, args=(q,))</span><br><span class="line">    <span class="comment"># 启动子进程_writer，写入:</span></span><br><span class="line">    _writer1.start()</span><br><span class="line">    _writer2.start()</span><br><span class="line">    <span class="comment"># 启动子进程_reader，读取:</span></span><br><span class="line">    _reader.start()</span><br><span class="line">    <span class="comment"># 等待_writer结束:</span></span><br><span class="line">    _writer1.join()</span><br><span class="line">    _writer2.join()</span><br><span class="line">    <span class="comment"># _reader进程里是死循环，无法等待其结束，只能强行终止:</span></span><br><span class="line">    _reader.terminate()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Pipe-只能一对一传输，一收一发"><a href="#Pipe-只能一对一传输，一收一发" class="headerlink" title="Pipe 只能一对一传输，一收一发"></a>Pipe 只能一对一传输，一收一发</h3><p>send 发数据，recv 收数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Pipe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">talk</span>(<span class="params">pipe</span>):</span><br><span class="line">    pipe.send(<span class="built_in">dict</span>(name=<span class="string">&#x27;Bob&#x27;</span>, spam=<span class="number">42</span>))  <span class="comment"># 传输一个字典</span></span><br><span class="line">    reply = pipe.recv()  <span class="comment"># 接收传输的数据</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;talker got:&#x27;</span>, reply)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    (parentEnd, childEnd) = Pipe()  <span class="comment"># 创建两个 Pipe() 实例，也可以改成 conf1， conf2</span></span><br><span class="line">    child = Process(target=talk,</span><br><span class="line">                    args=(childEnd, ))  <span class="comment"># 创建一个 Process 进程，名称为 child</span></span><br><span class="line">    child.start()  <span class="comment"># 启动进程</span></span><br><span class="line">    <span class="built_in">print</span>(</span><br><span class="line">        <span class="string">&#x27;parent got:&#x27;</span>,</span><br><span class="line">        parentEnd.recv())  <span class="comment"># parentEnd 是一个 Pip() 管道，可以接收 child Process 进程传输的数据</span></span><br><span class="line">    parentEnd.send(&#123;x * <span class="number">2</span></span><br><span class="line">                    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;spam&#x27;</span></span><br><span class="line">                    &#125;)  <span class="comment"># parentEnd 是一个 Pip() 管道，可以使用 send 方法来传输数据</span></span><br><span class="line">    child.join()  <span class="comment"># 传输的数据被 talk 函数内的 pip 管道接收，并赋值给 reply</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;parent exit&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="数据共享"><a href="#数据共享" class="headerlink" title="数据共享"></a>数据共享</h2><ul>
<li>Manager()返回的manager提供list, dict, Namespace, Lock, RLock, Semaphore, BoundedSemaphore, Condition, Event, Barrier, Queue, Value and Array类型的支持。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Manager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">d, l</span>):</span><br><span class="line">    d[<span class="number">1</span>] = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    d[<span class="string">&#x27;2&#x27;</span>] = <span class="number">2</span></span><br><span class="line">    d[<span class="number">0.25</span>] = <span class="literal">None</span></span><br><span class="line">    l.reverse()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> Manager() <span class="keyword">as</span> manager:</span><br><span class="line">        d = manager.<span class="built_in">dict</span>()</span><br><span class="line">        l = manager.<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">        p = Process(target=f, args=(d, l))</span><br><span class="line">        p.start()</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(d)</span><br><span class="line">        <span class="built_in">print</span>(l)</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>: <span class="number">2</span>, <span class="number">0.25</span>: <span class="literal">None</span>&#125;</span><br><span class="line">[<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>多线程多进程</tag>
      </tags>
  </entry>
  <entry>
    <title>防范xss攻击</title>
    <url>/2022/07/11/%E5%A6%82%E4%BD%95%E9%98%B2%E8%8C%83xss%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h1 id="xss-攻击分类："><a href="#xss-攻击分类：" class="headerlink" title="xss 攻击分类："></a>xss 攻击分类：</h1><h2 id="存储型："><a href="#存储型：" class="headerlink" title="存储型："></a>存储型：</h2><p>黑客将恶意代码传入数据库，当用户发起请求的时候，数据库返回恶意代码并渲染到前端页面，获取用户的个人信息。</p>
<p><img src="/2022/07/11/%E5%A6%82%E4%BD%95%E9%98%B2%E8%8C%83xss%E6%94%BB%E5%87%BB//1657526621189.png"></p>
<h2 id="反射型："><a href="#反射型：" class="headerlink" title="反射型："></a>反射型：</h2><p>用户将含有恶意 js 脚本请求提交给服务器，服务器收到请求后，又将恶意代码发送给浏览器。</p>
<p><img src="/2022/07/11/%E5%A6%82%E4%BD%95%E9%98%B2%E8%8C%83xss%E6%94%BB%E5%87%BB//1657527464894.png"></p>
<h2 id="基于-DOM-的-XSS-攻击"><a href="#基于-DOM-的-XSS-攻击" class="headerlink" title="基于 DOM 的 XSS 攻击"></a><strong>基于 DOM 的 XSS 攻击</strong></h2><p>基于 DOM 的 XSS 攻击是不牵涉到页面 Web 服务器的。黑客通过各种手段将恶意脚本注入到用户页面中，比如通过网络劫持（Wifi 路由器劫持、本地恶意软件）在页面传输过程中修改 HTML 页面的内容。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul>
<li>服务器对输入脚本进行过滤或转码</li>
<li>前端对输入进行转码或者限制输入</li>
<li>Cookie 使用 HttpOnly 属性</li>
<li>添加验证码防止脚本冒充用户提交危险操作</li>
</ul>
]]></content>
      <tags>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title>ip被封如何搭建代理</title>
    <url>/2023/05/07/%E6%90%AD%E5%BB%BA%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<p>如果 ip 被封了，可以采用该方法来重新搭建梯子，就是速度有些慢，原理是套 cdn</p>
<p>1、在 cloudflare 里面添加 site，获取 Nameserver，<a href="https://jackyangjie.github.io/2021/04/21/cloudflare-freenom%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9F%9F%E5%90%8D%E7%BD%91%E7%AB%99/">参考链接</a></p>
<p>2、设置 v2ray 脚本来实现</p>
<ul>
<li>下载 v2ray 脚本。<a href="https://github.com/bannedbook/fanqiang/blob/master/v2ss/%E8%87%AA%E5%BB%BAV2ray%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B.md">参考链接</a></li>
<li>配置脚本。<a href="https://github.com/bannedbook/fanqiang/blob/master/v2ss/V2Ray%E4%B9%8BTLS%2BWebSocket%2BNginx%2BCDN%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95.md#%E7%9C%9F%E5%AE%9E%E7%BD%91%E7%AB%99%E5%8A%A0%E8%A3%85v2ray">参考链接</a>注意客户端配置的 address 为服务器的真实域名。</li>
</ul>
<p><img src="/2023/05/07/%E6%90%AD%E5%BB%BA%E4%BB%A3%E7%90%86//1683461256579.png" alt="1683461256579"></p>
]]></content>
      <tags>
        <tag>搭建代理</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统</title>
    <url>/2022/07/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="进程和线程的区别？"><a href="#进程和线程的区别？" class="headerlink" title="进程和线程的区别？"></a>进程和线程的区别？</h2><ul>
<li>进程是资源管理的基本单位，线程是程序执行的基本单位。</li>
<li>进程是拥有资源的一个独立单位，线程不拥有系统资源，但是可以访问隶属于进程的资源。</li>
</ul>
<h2 id="线程和协程的区别？"><a href="#线程和协程的区别？" class="headerlink" title="线程和协程的区别？"></a>线程和协程的区别？</h2><ul>
<li>线程和进程是同步机制，而协程是异步机制。</li>
<li>线程调度靠系统内核管理，协程由用户控制。</li>
<li>协程的执行效率比线程高。</li>
</ul>
<p><img src="/2022/07/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F//1657209578801.png" alt="1657209578801"></p>
<h2 id="进程间通信方式有哪些？"><a href="#进程间通信方式有哪些？" class="headerlink" title="进程间通信方式有哪些？"></a>进程间通信方式有哪些？</h2><ul>
<li>信号量：信号量是一个<strong>计数器</strong> ，可以用来控制多个进程对共享资源的访问。</li>
<li>信号：一个进程可以向另外一个进程或者另外一组进程发送信号消息，通知目标进程执行特定的代码。</li>
<li>socket</li>
<li>共享内存</li>
<li>管道</li>
<li>消息队列</li>
</ul>
<h2 id="线程同步的方式有哪些？"><a href="#线程同步的方式有哪些？" class="headerlink" title="线程同步的方式有哪些？"></a>线程同步的方式有哪些？</h2><ul>
<li>互斥量：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。</li>
</ul>
<ul>
<li>信号量：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。</li>
<li>事件（信号）：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。</li>
</ul>
<h2 id="调度算法？"><a href="#调度算法？" class="headerlink" title="调度算法？"></a>调度算法？</h2><ul>
<li>先来先服务</li>
<li>最短作业优先</li>
<li>最短剩余时间优先</li>
<li>时间片轮询</li>
<li>优先级调度</li>
</ul>
]]></content>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库设计流程</title>
    <url>/2022/05/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1><h2 id="设计过程"><a href="#设计过程" class="headerlink" title="设计过程"></a>设计过程</h2><p>需求分析–&gt; 概念模型设计–&gt;逻辑模型设计–&gt;</p>
<p><img src="/2022/05/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1//1649938446040.png" alt="img"></p>
<h2 id="ER图设计"><a href="#ER图设计" class="headerlink" title="ER图设计"></a>ER图设计</h2><p><img src="/2022/05/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1//1649993338375.png"></p>
<h3 id="局部ER模型设计"><a href="#局部ER模型设计" class="headerlink" title="局部ER模型设计"></a>局部ER模型设计</h3><p><img src="/2022/05/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1//1649993355640.png"></p>
<p><img src="/2022/05/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1//1649993390245.png"></p>
<p><img src="/2022/05/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1//1649993543014.png" alt="img">借阅（<strong>BID,RID</strong>,借出日期，归还日期）</p>
<p><img src="/2022/05/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1//1649993568799.png"></p>
<p>若转换成如下形式，借阅信息实体必须有主键标识。</p>
<p><img src="/2022/05/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1//1649994147462.png"></p>
<h2 id="ER图转换成关系模式的步骤"><a href="#ER图转换成关系模式的步骤" class="headerlink" title="ER图转换成关系模式的步骤"></a>ER图转换成关系模式的步骤</h2><p><img src="/2022/05/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1//1649949136864.png" alt="img"></p>
<h3 id="一个实体类型转换成关系模式，标识符为主键"><a href="#一个实体类型转换成关系模式，标识符为主键" class="headerlink" title="一个实体类型转换成关系模式，标识符为主键"></a>一个实体类型转换成关系模式，标识符为主键</h3><p>系（<strong>系编号</strong> ，系名，电话）<br>教师 （__教工号__，姓名，性别，职称）<br>课程 （__课程号__，课程名，学分）</p>
<p><img src="/2022/05/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1//1649948416331.png" alt="img"></p>
<h3 id="实体联系转换方法"><a href="#实体联系转换方法" class="headerlink" title="实体联系转换方法"></a>实体联系转换方法</h3><ul>
<li>一对一，任意一方添加对方的主键，尽量避免空值</li>
<li>一对多，n</li>
<li>n方添加1的主键</li>
<li>多对多，新增关系模式，主键为（m,n）的联合主键</li>
</ul>
<p><img src="/2022/05/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1//1649991951493.png"></p>
<p>系（<strong>系编号</strong> ，系名，电话，___系主任教工号___）<br>教师 （__教工号__，姓名，性别，职称, ___所在系编号____）<br>课程 （__课程号__，课程名，学分，___所在系编号___）<br>任教 (__教工号，课程号__，教材)</p>
<h1 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h1><p><img src="/2022/05/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1//1650004976818.png"></p>
<p><img src="/2022/05/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1//1650005066736.png"></p>
<p><img src="/2022/05/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1//1650005096666.png"></p>
<p><img src="/2022/05/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1//1650005347317.png"></p>
<p>根据实际情况</p>
<p><img src="/2022/05/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1//1650005372799.png"></p>
<p><img src="/2022/05/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1//1650005329341.png"></p>
<p><img src="/2022/05/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1//1650010404036.png"></p>
<p><img src="/2022/05/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1//1650010432950.png"></p>
<h1 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h1><ul>
<li>__码__：表中可以唯一确定一个元组的某个属性（或者属性组），如果这样的码有不止一个，那么大家都叫候选码，我们从候选码中挑一个出来做老大，它就叫主码。</li>
<li>__全码__：如果一个码包含了所有的属性，这个码就是全码。</li>
<li>__主属性__：一个属性只要在任何一个候选码中出现过，这个属性就是主属性。</li>
<li>__非主属性__：与上面相反，没有在任何候选码中出现过，这个属性就是非主属性。</li>
<li>函数依赖</li>
</ul>
<p><img src="/2022/05/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1//1650080153558.png"></p>
<h2 id="第2范式"><a href="#第2范式" class="headerlink" title="第2范式"></a>第2范式</h2><p>在第1范式的基础上，消除非主属性对码的部分函数依赖，<br>非主属性完全依赖于码。</p>
<h2 id="第3范式"><a href="#第3范式" class="headerlink" title="第3范式"></a>第3范式</h2><p>在第2范式的基础上，消除非主属性之间的传递函数依赖。</p>
<h2 id="BC范式"><a href="#BC范式" class="headerlink" title="BC范式"></a>BC范式</h2><p>消除主属性对码的部分依赖和传递依赖。</p>
<p><img src="/2022/05/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1//1650077443689.png"></p>
<p><img src="/2022/05/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1//1650079553861.png"></p>
]]></content>
      <tags>
        <tag>sql</tag>
        <tag>数据库设计</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2022/07/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h2 id="TCP-和-UDP-的区别"><a href="#TCP-和-UDP-的区别" class="headerlink" title="TCP 和 UDP 的区别"></a>TCP 和 UDP 的区别</h2><ul>
<li><p>TCP 面向连接，可靠传输，三次握手，四次挥手，面向字节流，有拥塞控制、流量控制</p>
</li>
<li><p>UDP 面向无连接，不可靠传输，面向报文，无拥塞控制、流量控制</p>
<p><img src="/2022/07/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C//image-20220516113504600.png" alt="image-20220516113504600"></p>
</li>
</ul>
<h2 id="浏览器输入-url-后，发生了什么"><a href="#浏览器输入-url-后，发生了什么" class="headerlink" title="浏览器输入 url 后，发生了什么"></a>浏览器输入 url 后，发生了什么</h2><ol>
<li>DNS 域名解析</li>
<li>建立 TCP 链接</li>
<li>发送 HTTP 请求</li>
<li>服务器处理请求，返回响应结果</li>
<li>关闭 TCP 连接</li>
<li>浏览器渲染解析 HTML</li>
</ol>
<h2 id="HTTP-和-HTTPS-的区别"><a href="#HTTP-和-HTTPS-的区别" class="headerlink" title="HTTP 和 HTTPS 的区别"></a>HTTP 和 HTTPS 的区别</h2><ul>
<li>https 需要 ca 申请 ssl 证书</li>
<li>http 是明文传输，而 https 是 ssl 加密传输，https 比 http 安全</li>
<li>http 使用 80 端口，https 使用 443 端口</li>
</ul>
<h2 id="对称加密和非对称加密的区别"><a href="#对称加密和非对称加密的区别" class="headerlink" title="对称加密和非对称加密的区别"></a>对称加密和非对称加密的区别</h2><p>对称加密：加密和解密是同一个密钥</p>
<p>非对称加密：公钥加密，私钥解密，两个不同的密钥。</p>
<h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>公钥加密，私钥解密</p>
<p><img src="/2022/07/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C//image-20220519140620778.png" alt="image-20220519140620778"></p>
<h2 id="状态码的含义"><a href="#状态码的含义" class="headerlink" title="状态码的含义"></a>状态码的含义</h2><ul>
<li>200，成功</li>
<li>301，永久重定向</li>
<li>302，临时重定向</li>
<li>400，用户请求有误</li>
<li>403，用户请求被禁止</li>
<li>404，用户访问的网页不存在</li>
<li>500，服务器内部错误</li>
</ul>
<h2 id="A-类、B-类等地址范围-全-0-表示本网络，全-1-表示广播地址-这两个不用分配"><a href="#A-类、B-类等地址范围-全-0-表示本网络，全-1-表示广播地址-这两个不用分配" class="headerlink" title="A 类、B 类等地址范围(全 0 表示本网络，全 1 表示广播地址)这两个不用分配"></a>A 类、B 类等地址范围(全 0 表示本网络，全 1 表示广播地址)这两个不用分配</h2><table>
<thead>
<tr>
<th>类别</th>
<th>可用范围</th>
<th>私有号段</th>
</tr>
</thead>
<tbody><tr>
<td>A 0</td>
<td>1.0.0.1-126.255.255.254</td>
<td>10.0.0.0-10.255.255.255</td>
</tr>
<tr>
<td>B 10</td>
<td>128.0.0.1-191.255.255.254</td>
<td>172.16.0.0-172.31.255.255</td>
</tr>
<tr>
<td>C 110</td>
<td>192.0.0.1-223.255.255.254</td>
<td>192.168.0.0-192.168.255.255</td>
</tr>
<tr>
<td>D 1110</td>
<td>224-239</td>
<td></td>
</tr>
<tr>
<td>E 1111</td>
<td>240-255</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>订阅链接更换</title>
    <url>/2022/10/30/%E8%AE%A2%E9%98%85%E9%93%BE%E6%8E%A5%E6%9B%B4%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="安卓端-V2rayNG"><a href="#安卓端-V2rayNG" class="headerlink" title="安卓端 V2rayNG"></a>安卓端 V2rayNG</h2><p>1、打开软件，左上角三横点一下，打开订阅分组设置，右上角有个+号，添加配置信息。</p>
<p><img src="/2022/10/30/%E8%AE%A2%E9%98%85%E9%93%BE%E6%8E%A5%E6%9B%B4%E6%8D%A2//1667058597395.jpg" alt="1667058597395"></p>
<p><img src="/2022/10/30/%E8%AE%A2%E9%98%85%E9%93%BE%E6%8E%A5%E6%9B%B4%E6%8D%A2//1667058629892.jpg" alt="1667058629892"></p>
<p><img src="/2022/10/30/%E8%AE%A2%E9%98%85%E9%93%BE%E6%8E%A5%E6%9B%B4%E6%8D%A2//1667058684495.jpg" alt="1667058684495"></p>
<p>此处<strong>备注</strong>需要随便填一个</p>
<p><img src="/2022/10/30/%E8%AE%A2%E9%98%85%E9%93%BE%E6%8E%A5%E6%9B%B4%E6%8D%A2//1667058964112.jpg" alt="1667058964112"></p>
<p>返回主页面，点击<strong>更新订阅</strong>即可。</p>
<p><img src="/2022/10/30/%E8%AE%A2%E9%98%85%E9%93%BE%E6%8E%A5%E6%9B%B4%E6%8D%A2//1667058732777.jpg" alt="1667058732777"></p>
<p>成功页面！</p>
<p><img src="/2022/10/30/%E8%AE%A2%E9%98%85%E9%93%BE%E6%8E%A5%E6%9B%B4%E6%8D%A2//1667058749878.jpg" alt="1667058749878"></p>
<h2 id="电脑端-winXray"><a href="#电脑端-winXray" class="headerlink" title="电脑端 winXray"></a>电脑端 winXray</h2><p>1、首先复制订阅链接，然后打开软件。依次点击选择配置、订阅、添加订阅。</p>
<p><img src="/2022/10/30/%E8%AE%A2%E9%98%85%E9%93%BE%E6%8E%A5%E6%9B%B4%E6%8D%A2//1667059199809.png" alt="1667059199809"></p>
<p>2、点击更新订阅。</p>
<p><img src="/2022/10/30/%E8%AE%A2%E9%98%85%E9%93%BE%E6%8E%A5%E6%9B%B4%E6%8D%A2//1667059354641.png" alt="1667059354641"></p>
<p>3、选择全局代理或者pac均可</p>
<p><img src="/2022/10/30/%E8%AE%A2%E9%98%85%E9%93%BE%E6%8E%A5%E6%9B%B4%E6%8D%A2//1667059450525.png" alt="1667059450525"></p>
]]></content>
      <tags>
        <tag>订阅链接更换</tag>
      </tags>
  </entry>
</search>
